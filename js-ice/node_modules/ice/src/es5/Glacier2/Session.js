"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */

/* jshint ignore: start */

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
  var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;

  var Glacier2 = require("../Glacier2/SSLInfo").Glacier2;

  var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Exception", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/BuiltinSequences", "../Ice/Identity"]).Ice;

  var Slice = Ice.Slice;
  /* slice2js browser-bundle-skip-end */

  /**
   * This exception is raised if an attempt to create a new session failed.
   *
   **/

  Glacier2.CannotCreateSessionException =
  /*#__PURE__*/
  function (_Ice$UserException) {
    _inherits(_class, _Ice$UserException);

    function _class() {
      var _this;

      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

      var _cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, _cause));
      _this.reason = reason;
      return _this;
    }

    _createClass(_class, [{
      key: "_mostDerivedType",
      value: function _mostDerivedType() {
        return Glacier2.CannotCreateSessionException;
      }
    }, {
      key: "_writeMemberImpl",
      value: function _writeMemberImpl(ostr) {
        ostr.writeString(this.reason);
      }
    }, {
      key: "_readMemberImpl",
      value: function _readMemberImpl(istr) {
        this.reason = istr.readString();
      }
    }], [{
      key: "_parent",
      get: function get() {
        return Ice.UserException;
      }
    }, {
      key: "_id",
      get: function get() {
        return "::Glacier2::CannotCreateSessionException";
      }
    }]);

    return _class;
  }(Ice.UserException);

  Slice.PreservedUserException(Glacier2.CannotCreateSessionException);
  var iceC_Glacier2_Session_ids = ["::Glacier2::Session", "::Ice::Object"];
  /**
   * A client-visible session object, which is tied to the lifecycle of a {@link Router}.
   *
   * @see Router
   * @see SessionManager
   *
   **/

  Glacier2.Session =
  /*#__PURE__*/
  function (_Ice$Object) {
    _inherits(_class2, _Ice$Object);

    function _class2() {
      _classCallCheck(this, _class2);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class2).apply(this, arguments));
    }

    return _class2;
  }(Ice.Object);

  Glacier2.SessionPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx) {
    _inherits(_class3, _Ice$ObjectPrx);

    function _class3() {
      _classCallCheck(this, _class3);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class3).apply(this, arguments));
    }

    return _class3;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Glacier2.Session, Glacier2.SessionPrx, iceC_Glacier2_Session_ids, 0, {
    "destroy": [,,,,,,,,,]
  });
  var iceC_Glacier2_StringSet_ids = ["::Glacier2::StringSet", "::Ice::Object"];
  /**
   * An object for managing the set of identity constraints for specific
   * parts of object identity on a
   * {@link Session}.
   *
   * @see Session
   * @see SessionControl
   *
   **/

  Glacier2.StringSet =
  /*#__PURE__*/
  function (_Ice$Object2) {
    _inherits(_class4, _Ice$Object2);

    function _class4() {
      _classCallCheck(this, _class4);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class4).apply(this, arguments));
    }

    return _class4;
  }(Ice.Object);

  Glacier2.StringSetPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx2) {
    _inherits(_class5, _Ice$ObjectPrx2);

    function _class5() {
      _classCallCheck(this, _class5);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class5).apply(this, arguments));
    }

    return _class5;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Glacier2.StringSet, Glacier2.StringSetPrx, iceC_Glacier2_StringSet_ids, 0, {
    "add": [, 2, 2,,, [["Ice.StringSeqHelper"]],,,,],
    "remove": [, 2, 2,,, [["Ice.StringSeqHelper"]],,,,],
    "get": [, 2, 2,, ["Ice.StringSeqHelper"],,,,,]
  });
  var iceC_Glacier2_IdentitySet_ids = ["::Glacier2::IdentitySet", "::Ice::Object"];
  /**
   * An object for managing the set of object identity constraints on a
   * {@link Session}.
   *
   * @see Session
   * @see SessionControl
   *
   **/

  Glacier2.IdentitySet =
  /*#__PURE__*/
  function (_Ice$Object3) {
    _inherits(_class6, _Ice$Object3);

    function _class6() {
      _classCallCheck(this, _class6);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class6).apply(this, arguments));
    }

    return _class6;
  }(Ice.Object);

  Glacier2.IdentitySetPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx3) {
    _inherits(_class7, _Ice$ObjectPrx3);

    function _class7() {
      _classCallCheck(this, _class7);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class7).apply(this, arguments));
    }

    return _class7;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Glacier2.IdentitySet, Glacier2.IdentitySetPrx, iceC_Glacier2_IdentitySet_ids, 0, {
    "add": [, 2, 2,,, [["Ice.IdentitySeqHelper"]],,,,],
    "remove": [, 2, 2,,, [["Ice.IdentitySeqHelper"]],,,,],
    "get": [, 2, 2,, ["Ice.IdentitySeqHelper"],,,,,]
  });
  var iceC_Glacier2_SessionControl_ids = ["::Glacier2::SessionControl", "::Ice::Object"];
  /**
   * An administrative session control object, which is tied to the
   * lifecycle of a {@link Session}.
   *
   * @see Session
   *
   **/

  Glacier2.SessionControl =
  /*#__PURE__*/
  function (_Ice$Object4) {
    _inherits(_class8, _Ice$Object4);

    function _class8() {
      _classCallCheck(this, _class8);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class8).apply(this, arguments));
    }

    return _class8;
  }(Ice.Object);

  Glacier2.SessionControlPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx4) {
    _inherits(_class9, _Ice$ObjectPrx4);

    function _class9() {
      _classCallCheck(this, _class9);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class9).apply(this, arguments));
    }

    return _class9;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Glacier2.SessionControl, Glacier2.SessionControlPrx, iceC_Glacier2_SessionControl_ids, 0, {
    "categories": [,,,, ["Glacier2.StringSetPrx"],,,,,],
    "adapterIds": [,,,, ["Glacier2.StringSetPrx"],,,,,],
    "identities": [,,,, ["Glacier2.IdentitySetPrx"],,,,,],
    "getSessionTimeout": [, 2, 2,, [3],,,,,],
    "destroy": [,,,,,,,,,]
  });
  var iceC_Glacier2_SessionManager_ids = ["::Glacier2::SessionManager", "::Ice::Object"];
  /**
   * The session manager for username/password authenticated users that
   * is responsible for managing {@link Session} objects. New session objects
   * are created by the {@link Router} object calling on an application-provided
   * session manager. If no session manager is provided by the application,
   * no client-visible sessions are passed to the client.
   *
   * @see Router
   * @see Session
   *
   **/

  Glacier2.SessionManager =
  /*#__PURE__*/
  function (_Ice$Object5) {
    _inherits(_class10, _Ice$Object5);

    function _class10() {
      _classCallCheck(this, _class10);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class10).apply(this, arguments));
    }

    return _class10;
  }(Ice.Object);

  Glacier2.SessionManagerPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx5) {
    _inherits(_class11, _Ice$ObjectPrx5);

    function _class11() {
      _classCallCheck(this, _class11);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class11).apply(this, arguments));
    }

    return _class11;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Glacier2.SessionManager, Glacier2.SessionManagerPrx, iceC_Glacier2_SessionManager_ids, 0, {
    "create": [,,, 2, ["Glacier2.SessionPrx"], [[7], ["Glacier2.SessionControlPrx"]],, [Glacier2.CannotCreateSessionException],,]
  });
  var iceC_Glacier2_SSLSessionManager_ids = ["::Glacier2::SSLSessionManager", "::Ice::Object"];
  /**
   * The session manager for SSL authenticated users that is
   * responsible for managing {@link Session} objects. New session objects are
   * created by the {@link Router} object calling on an application-provided
   * session manager. If no session manager is provided by the
   * application, no client-visible sessions are passed to the client.
   *
   * @see Router
   * @see Session
   *
   **/

  Glacier2.SSLSessionManager =
  /*#__PURE__*/
  function (_Ice$Object6) {
    _inherits(_class12, _Ice$Object6);

    function _class12() {
      _classCallCheck(this, _class12);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class12).apply(this, arguments));
    }

    return _class12;
  }(Ice.Object);

  Glacier2.SSLSessionManagerPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx6) {
    _inherits(_class13, _Ice$ObjectPrx6);

    function _class13() {
      _classCallCheck(this, _class13);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class13).apply(this, arguments));
    }

    return _class13;
  }(Ice.ObjectPrx);

  Slice.defineOperations(Glacier2.SSLSessionManager, Glacier2.SSLSessionManagerPrx, iceC_Glacier2_SSLSessionManager_ids, 0, {
    "create": [,,, 2, ["Glacier2.SessionPrx"], [[Glacier2.SSLInfo], ["Glacier2.SessionControlPrx"]],, [Glacier2.CannotCreateSessionException],,]
  });
  /* slice2js browser-bundle-skip */

  exports.Glacier2 = Glacier2;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self.Ice._require : window.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : window);
/* slice2js browser-bundle-skip-end */