"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Current.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */

/* jshint ignore: start */

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
  var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;

  var Ice = _ModuleRegistry.require(module, ["../Ice/Struct", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/ObjectAdapterF", "../Ice/ConnectionF", "../Ice/Identity", "../Ice/Version"]).Ice;

  var Slice = Ice.Slice;
  /* slice2js browser-bundle-skip-end */

  Slice.defineDictionary(Ice, "Context", "ContextHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
  /**
   * Determines the retry behavior an invocation in case of a (potentially) recoverable error.
   *
   **/

  Ice.OperationMode = Slice.defineEnum([['Normal', 0], ['Nonmutating', 1], ['Idempotent', 2]]);
  /**
   * Information about the current method invocation for servers. Each
   * operation on the server has a <code>Current</code> as its implicit final
   * parameter. <code>Current</code> is mostly used for Ice services. Most
   * applications ignore this parameter.
   *
   **/

  Ice.Current =
  /*#__PURE__*/
  function () {
    function _class() {
      var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var con = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Ice.Identity();
      var facet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      var operation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      var mode = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Ice.OperationMode.Normal;
      var ctx = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
      var requestId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var encoding = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : new Ice.EncodingVersion();

      _classCallCheck(this, _class);

      this.adapter = adapter;
      this.con = con;
      this.id = id;
      this.facet = facet;
      this.operation = operation;
      this.mode = mode;
      this.ctx = ctx;
      this.requestId = requestId;
      this.encoding = encoding;
    }

    return _class;
  }();

  Slice.defineStruct(Ice.Current, false, true);
  /* slice2js browser-bundle-skip */

  exports.Ice = Ice;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self.Ice._require : window.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : window);
/* slice2js browser-bundle-skip-end */