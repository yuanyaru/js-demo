"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */

/* jshint ignore: start */

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
  var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;

  var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Struct", "../Ice/EnumBase", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/ObjectAdapterF", "../Ice/Identity", "../Ice/Endpoint"]).Ice;

  var Slice = Ice.Slice;
  /* slice2js browser-bundle-skip-end */

  /**
   * The batch compression option when flushing queued batch requests.
   *
   **/

  Ice.CompressBatch = Slice.defineEnum([['Yes', 0], ['No', 1], ['BasedOnProxy', 2]]);
  /**
   * Base class providing access to the connection details.
   *
   **/

  Ice.ConnectionInfo =
  /*#__PURE__*/
  function () {
    function _class() {
      var underlying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var incoming = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var adapterName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var connectionId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

      _classCallCheck(this, _class);

      this.underlying = underlying;
      this.incoming = incoming;
      this.adapterName = adapterName;
      this.connectionId = connectionId;
    }

    return _class;
  }();
  /**
   * Specifies the close semantics for Active Connection Management.
   **/


  Ice.ACMClose = Slice.defineEnum([['CloseOff', 0], ['CloseOnIdle', 1], ['CloseOnInvocation', 2], ['CloseOnInvocationAndIdle', 3], ['CloseOnIdleForceful', 4]]);
  /**
   * Specifies the heartbeat semantics for Active Connection Management.
   **/

  Ice.ACMHeartbeat = Slice.defineEnum([['HeartbeatOff', 0], ['HeartbeatOnDispatch', 1], ['HeartbeatOnIdle', 2], ['HeartbeatAlways', 3]]);
  /**
   * A collection of Active Connection Management configuration settings.
   **/

  Ice.ACM =
  /*#__PURE__*/
  function () {
    function _class2() {
      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Ice.ACMClose.CloseOff;
      var heartbeat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Ice.ACMHeartbeat.HeartbeatOff;

      _classCallCheck(this, _class2);

      this.timeout = timeout;
      this.close = close;
      this.heartbeat = heartbeat;
    }

    return _class2;
  }();

  Slice.defineStruct(Ice.ACM, true, true);
  /**
   * Determines the behavior when manually closing a connection.
   **/

  Ice.ConnectionClose = Slice.defineEnum([['Forcefully', 0], ['Gracefully', 1], ['GracefullyWithWait', 2]]);
  /**
   * Provides access to the connection details of an IP connection
   *
   **/

  Ice.IPConnectionInfo =
  /*#__PURE__*/
  function (_Ice$ConnectionInfo) {
    _inherits(_class3, _Ice$ConnectionInfo);

    function _class3(underlying, incoming, adapterName, connectionId) {
      var _this;

      var localAddress = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      var localPort = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;
      var remoteAddress = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
      var remotePort = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : -1;

      _classCallCheck(this, _class3);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class3).call(this, underlying, incoming, adapterName, connectionId));
      _this.localAddress = localAddress;
      _this.localPort = localPort;
      _this.remoteAddress = remoteAddress;
      _this.remotePort = remotePort;
      return _this;
    }

    return _class3;
  }(Ice.ConnectionInfo);
  /**
   * Provides access to the connection details of a TCP connection
   *
   **/


  Ice.TCPConnectionInfo =
  /*#__PURE__*/
  function (_Ice$IPConnectionInfo) {
    _inherits(_class4, _Ice$IPConnectionInfo);

    function _class4(underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort) {
      var _this2;

      var rcvSize = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var sndSize = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;

      _classCallCheck(this, _class4);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_class4).call(this, underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort));
      _this2.rcvSize = rcvSize;
      _this2.sndSize = sndSize;
      return _this2;
    }

    return _class4;
  }(Ice.IPConnectionInfo);
  /**
   * Provides access to the connection details of a UDP connection
   *
   **/


  Ice.UDPConnectionInfo =
  /*#__PURE__*/
  function (_Ice$IPConnectionInfo2) {
    _inherits(_class5, _Ice$IPConnectionInfo2);

    function _class5(underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort) {
      var _this3;

      var mcastAddress = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : "";
      var mcastPort = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : -1;
      var rcvSize = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;
      var sndSize = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;

      _classCallCheck(this, _class5);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class5).call(this, underlying, incoming, adapterName, connectionId, localAddress, localPort, remoteAddress, remotePort));
      _this3.mcastAddress = mcastAddress;
      _this3.mcastPort = mcastPort;
      _this3.rcvSize = rcvSize;
      _this3.sndSize = sndSize;
      return _this3;
    }

    return _class5;
  }(Ice.IPConnectionInfo);

  Slice.defineDictionary(Ice, "HeaderDict", "HeaderDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
  /**
   * Provides access to the connection details of a WebSocket connection
   *
   **/

  Ice.WSConnectionInfo =
  /*#__PURE__*/
  function (_Ice$ConnectionInfo2) {
    _inherits(_class6, _Ice$ConnectionInfo2);

    function _class6(underlying, incoming, adapterName, connectionId) {
      var _this4;

      var headers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

      _classCallCheck(this, _class6);

      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(_class6).call(this, underlying, incoming, adapterName, connectionId));
      _this4.headers = headers;
      return _this4;
    }

    return _class6;
  }(Ice.ConnectionInfo);
  /* slice2js browser-bundle-skip */


  exports.Ice = Ice;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self.Ice._require : window.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : window);
/* slice2js browser-bundle-skip-end */