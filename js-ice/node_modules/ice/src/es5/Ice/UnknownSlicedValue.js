"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/Value").Ice;

var SliceInfo = function SliceInfo() {
  _classCallCheck(this, SliceInfo);

  //
  // The Slice type ID for this slice.
  //
  this.typeId = ""; //
  // The Slice compact type ID for this slice.
  //

  this.compactId = -1; //
  // The encoded bytes for this slice, including the leading size integer.
  //

  this.bytes = []; //
  // The class instances referenced by this slice.
  //

  this.instances = []; //
  // Whether or not the slice contains optional members.
  //

  this.hasOptionalMembers = false; //
  // Whether or not this is the last slice.
  //

  this.isLastSlice = false;
};

Ice.SliceInfo = SliceInfo;

var SlicedData = function SlicedData(slices) {
  _classCallCheck(this, SlicedData);

  this.slices = slices;
};

Ice.SlicedData = SlicedData;

var UnknownSlicedValue =
/*#__PURE__*/
function (_Ice$Value) {
  _inherits(UnknownSlicedValue, _Ice$Value);

  function UnknownSlicedValue(unknownTypeId) {
    var _this;

    _classCallCheck(this, UnknownSlicedValue);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UnknownSlicedValue).call(this));
    _this._unknownTypeId = unknownTypeId;
    return _this;
  }

  _createClass(UnknownSlicedValue, [{
    key: "ice_getSlicedData",
    value: function ice_getSlicedData() {
      return this._slicedData;
    }
  }, {
    key: "ice_id",
    value: function ice_id() {
      return this._unknownTypeId;
    }
  }, {
    key: "_iceWrite",
    value: function _iceWrite(os) {
      os.startValue(this._slicedData);
      os.endValue();
    }
  }, {
    key: "_iceRead",
    value: function _iceRead(is) {
      is.startValue();
      this._slicedData = is.endValue(true);
    }
  }]);

  return UnknownSlicedValue;
}(Ice.Value);

Ice.UnknownSlicedValue = UnknownSlicedValue;
module.exports.Ice = Ice;