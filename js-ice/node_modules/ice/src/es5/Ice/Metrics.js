"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */

/* jshint ignore: start */

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
  var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;

  var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Operation", "../Ice/Struct", "../Ice/Exception", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/BuiltinSequences"]).Ice;

  var Slice = Ice.Slice;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */

  var IceMX = _ModuleRegistry.module("IceMX");
  /* slice2js browser-bundle-skip-end */


  Slice.defineDictionary(IceMX, "StringIntDict", "StringIntDictHelper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);
  var iceC_IceMX_Metrics_ids = ["::Ice::Object", "::IceMX::Metrics"];
  /**
   * The base class for metrics. A metrics object represents a
   * collection of measurements associated to a given a system.
   *
   **/

  IceMX.Metrics =
  /*#__PURE__*/
  function (_Ice$Value) {
    _inherits(_class, _Ice$Value);

    function _class() {
      var _this;

      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Ice.Long(0, 0);
      var current = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var totalLifetime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Ice.Long(0, 0);
      var failures = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

      _classCallCheck(this, _class);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this));
      _this.id = id;
      _this.total = total;
      _this.current = current;
      _this.totalLifetime = totalLifetime;
      _this.failures = failures;
      return _this;
    }

    _createClass(_class, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeString(this.id);
        ostr.writeLong(this.total);
        ostr.writeInt(this.current);
        ostr.writeLong(this.totalLifetime);
        ostr.writeInt(this.failures);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.id = istr.readString();
        this.total = istr.readLong();
        this.current = istr.readInt();
        this.totalLifetime = istr.readLong();
        this.failures = istr.readInt();
      }
    }]);

    return _class;
  }(Ice.Value);

  Slice.defineValue(IceMX.Metrics, iceC_IceMX_Metrics_ids[1], false);
  /**
   * A structure to keep track of failures associated with a given
   * metrics.
   *
   **/

  IceMX.MetricsFailures =
  /*#__PURE__*/
  function () {
    function _class2() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var failures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, _class2);

      this.id = id;
      this.failures = failures;
    }

    _createClass(_class2, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.id);
        IceMX.StringIntDictHelper.write(ostr, this.failures);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.id = istr.readString();
        this.failures = IceMX.StringIntDictHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 2;
      }
    }]);

    return _class2;
  }();

  Slice.defineStruct(IceMX.MetricsFailures, false, true);
  Slice.defineSequence(IceMX, "MetricsFailuresSeqHelper", "IceMX.MetricsFailures", false);
  Slice.defineSequence(IceMX, "MetricsMapHelper", "Ice.ObjectHelper", false, "IceMX.Metrics");
  Slice.defineDictionary(IceMX, "MetricsView", "MetricsViewHelper", "Ice.StringHelper", "IceMX.MetricsMapHelper", false, undefined, undefined, Ice.ArrayUtil.equals);
  /**
   * Raised if a metrics view cannot be found.
   *
   **/

  IceMX.UnknownMetricsView =
  /*#__PURE__*/
  function (_Ice$UserException) {
    _inherits(_class3, _Ice$UserException);

    function _class3() {
      var _cause = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

      _classCallCheck(this, _class3);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class3).call(this, _cause));
    }

    _createClass(_class3, [{
      key: "_mostDerivedType",
      value: function _mostDerivedType() {
        return IceMX.UnknownMetricsView;
      }
    }], [{
      key: "_parent",
      get: function get() {
        return Ice.UserException;
      }
    }, {
      key: "_id",
      get: function get() {
        return "::IceMX::UnknownMetricsView";
      }
    }]);

    return _class3;
  }(Ice.UserException);

  var iceC_IceMX_MetricsAdmin_ids = ["::Ice::Object", "::IceMX::MetricsAdmin"];
  /**
   * The metrics administrative facet interface. This interface allows
   * remote administrative clients to access metrics of an application
   * that enabled the Ice administrative facility and configured some
   * metrics views.
   *
   **/

  IceMX.MetricsAdmin =
  /*#__PURE__*/
  function (_Ice$Object) {
    _inherits(_class4, _Ice$Object);

    function _class4() {
      _classCallCheck(this, _class4);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class4).apply(this, arguments));
    }

    return _class4;
  }(Ice.Object);

  IceMX.MetricsAdminPrx =
  /*#__PURE__*/
  function (_Ice$ObjectPrx) {
    _inherits(_class5, _Ice$ObjectPrx);

    function _class5() {
      _classCallCheck(this, _class5);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class5).apply(this, arguments));
    }

    return _class5;
  }(Ice.ObjectPrx);

  Slice.defineOperations(IceMX.MetricsAdmin, IceMX.MetricsAdminPrx, iceC_IceMX_MetricsAdmin_ids, 1, {
    "getMetricsViewNames": [,,, 2, ["Ice.StringSeqHelper"],, [["Ice.StringSeqHelper"]],,,],
    "enableMetricsView": [,,, 2,, [[7]],, [IceMX.UnknownMetricsView],,],
    "disableMetricsView": [,,, 2,, [[7]],, [IceMX.UnknownMetricsView],,],
    "getMetricsView": [,,, 2, ["IceMX.MetricsViewHelper"], [[7]], [[4]], [IceMX.UnknownMetricsView],, true],
    "getMapMetricsFailures": [,,, 2, ["IceMX.MetricsFailuresSeqHelper"], [[7], [7]],, [IceMX.UnknownMetricsView],,],
    "getMetricsFailures": [,,, 2, [IceMX.MetricsFailures], [[7], [7], [7]],, [IceMX.UnknownMetricsView],,]
  });
  var iceC_IceMX_ThreadMetrics_ids = ["::Ice::Object", "::IceMX::Metrics", "::IceMX::ThreadMetrics"];
  /**
   * Provides information on the number of threads currently in use and
   * their activity.
   *
   **/

  IceMX.ThreadMetrics =
  /*#__PURE__*/
  function (_IceMX$Metrics) {
    _inherits(_class6, _IceMX$Metrics);

    function _class6(id, total, current, totalLifetime, failures) {
      var _this2;

      var inUseForIO = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var inUseForUser = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var inUseForOther = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;

      _classCallCheck(this, _class6);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_class6).call(this, id, total, current, totalLifetime, failures));
      _this2.inUseForIO = inUseForIO;
      _this2.inUseForUser = inUseForUser;
      _this2.inUseForOther = inUseForOther;
      return _this2;
    }

    _createClass(_class6, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeInt(this.inUseForIO);
        ostr.writeInt(this.inUseForUser);
        ostr.writeInt(this.inUseForOther);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.inUseForIO = istr.readInt();
        this.inUseForUser = istr.readInt();
        this.inUseForOther = istr.readInt();
      }
    }]);

    return _class6;
  }(IceMX.Metrics);

  Slice.defineValue(IceMX.ThreadMetrics, iceC_IceMX_ThreadMetrics_ids[2], false);
  var iceC_IceMX_DispatchMetrics_ids = ["::Ice::Object", "::IceMX::DispatchMetrics", "::IceMX::Metrics"];
  /**
   * Provides information on servant dispatch.
   *
   **/

  IceMX.DispatchMetrics =
  /*#__PURE__*/
  function (_IceMX$Metrics2) {
    _inherits(_class7, _IceMX$Metrics2);

    function _class7(id, total, current, totalLifetime, failures) {
      var _this3;

      var userException = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var size = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Ice.Long(0, 0);
      var replySize = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : new Ice.Long(0, 0);

      _classCallCheck(this, _class7);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class7).call(this, id, total, current, totalLifetime, failures));
      _this3.userException = userException;
      _this3.size = size;
      _this3.replySize = replySize;
      return _this3;
    }

    _createClass(_class7, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeInt(this.userException);
        ostr.writeLong(this.size);
        ostr.writeLong(this.replySize);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.userException = istr.readInt();
        this.size = istr.readLong();
        this.replySize = istr.readLong();
      }
    }]);

    return _class7;
  }(IceMX.Metrics);

  Slice.defineValue(IceMX.DispatchMetrics, iceC_IceMX_DispatchMetrics_ids[1], false);
  var iceC_IceMX_ChildInvocationMetrics_ids = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::Metrics"];
  /**
   * Provides information on child invocations. A child invocation is
   * either remote (sent over an Ice connection) or collocated. An
   * invocation can have multiple child invocation if it is
   * retried. Child invocation metrics are embedded within {@link
   * InvocationMetrics}.
   *
   **/

  IceMX.ChildInvocationMetrics =
  /*#__PURE__*/
  function (_IceMX$Metrics3) {
    _inherits(_class8, _IceMX$Metrics3);

    function _class8(id, total, current, totalLifetime, failures) {
      var _this4;

      var size = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Ice.Long(0, 0);
      var replySize = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Ice.Long(0, 0);

      _classCallCheck(this, _class8);

      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(_class8).call(this, id, total, current, totalLifetime, failures));
      _this4.size = size;
      _this4.replySize = replySize;
      return _this4;
    }

    _createClass(_class8, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeLong(this.size);
        ostr.writeLong(this.replySize);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.size = istr.readLong();
        this.replySize = istr.readLong();
      }
    }]);

    return _class8;
  }(IceMX.Metrics);

  Slice.defineValue(IceMX.ChildInvocationMetrics, iceC_IceMX_ChildInvocationMetrics_ids[1], false);
  var iceC_IceMX_CollocatedMetrics_ids = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::CollocatedMetrics", "::IceMX::Metrics"];
  /**
   * Provides information on invocations that are collocated. Collocated
   * metrics are embedded within {@link InvocationMetrics}.
   *
   **/

  IceMX.CollocatedMetrics =
  /*#__PURE__*/
  function (_IceMX$ChildInvocatio) {
    _inherits(_class9, _IceMX$ChildInvocatio);

    function _class9(id, total, current, totalLifetime, failures, size, replySize) {
      _classCallCheck(this, _class9);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class9).call(this, id, total, current, totalLifetime, failures, size, replySize));
    }

    return _class9;
  }(IceMX.ChildInvocationMetrics);

  Slice.defineValue(IceMX.CollocatedMetrics, iceC_IceMX_CollocatedMetrics_ids[2], false);
  var iceC_IceMX_RemoteMetrics_ids = ["::Ice::Object", "::IceMX::ChildInvocationMetrics", "::IceMX::Metrics", "::IceMX::RemoteMetrics"];
  /**
   * Provides information on invocations that are specifically sent over
   * Ice connections. Remote metrics are embedded within {@link InvocationMetrics}.
   *
   **/

  IceMX.RemoteMetrics =
  /*#__PURE__*/
  function (_IceMX$ChildInvocatio2) {
    _inherits(_class10, _IceMX$ChildInvocatio2);

    function _class10(id, total, current, totalLifetime, failures, size, replySize) {
      _classCallCheck(this, _class10);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class10).call(this, id, total, current, totalLifetime, failures, size, replySize));
    }

    return _class10;
  }(IceMX.ChildInvocationMetrics);

  Slice.defineValue(IceMX.RemoteMetrics, iceC_IceMX_RemoteMetrics_ids[3], false);
  var iceC_IceMX_InvocationMetrics_ids = ["::Ice::Object", "::IceMX::InvocationMetrics", "::IceMX::Metrics"];
  /**
   * Provide measurements for proxy invocations. Proxy invocations can
   * either be sent over the wire or be collocated.
   *
   **/

  IceMX.InvocationMetrics =
  /*#__PURE__*/
  function (_IceMX$Metrics4) {
    _inherits(_class11, _IceMX$Metrics4);

    function _class11(id, total, current, totalLifetime, failures) {
      var _this5;

      var retry = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var userException = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var remotes = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
      var collocated = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

      _classCallCheck(this, _class11);

      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(_class11).call(this, id, total, current, totalLifetime, failures));
      _this5.retry = retry;
      _this5.userException = userException;
      _this5.remotes = remotes;
      _this5.collocated = collocated;
      return _this5;
    }

    _createClass(_class11, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeInt(this.retry);
        ostr.writeInt(this.userException);
        IceMX.MetricsMapHelper.write(ostr, this.remotes);
        IceMX.MetricsMapHelper.write(ostr, this.collocated);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.retry = istr.readInt();
        this.userException = istr.readInt();
        this.remotes = IceMX.MetricsMapHelper.read(istr);
        this.collocated = IceMX.MetricsMapHelper.read(istr);
      }
    }]);

    return _class11;
  }(IceMX.Metrics);

  Slice.defineValue(IceMX.InvocationMetrics, iceC_IceMX_InvocationMetrics_ids[1], false);
  var iceC_IceMX_ConnectionMetrics_ids = ["::Ice::Object", "::IceMX::ConnectionMetrics", "::IceMX::Metrics"];
  /**
   * Provides information on the data sent and received over Ice
   * connections.
   *
   **/

  IceMX.ConnectionMetrics =
  /*#__PURE__*/
  function (_IceMX$Metrics5) {
    _inherits(_class12, _IceMX$Metrics5);

    function _class12(id, total, current, totalLifetime, failures) {
      var _this6;

      var receivedBytes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new Ice.Long(0, 0);
      var sentBytes = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new Ice.Long(0, 0);

      _classCallCheck(this, _class12);

      _this6 = _possibleConstructorReturn(this, _getPrototypeOf(_class12).call(this, id, total, current, totalLifetime, failures));
      _this6.receivedBytes = receivedBytes;
      _this6.sentBytes = sentBytes;
      return _this6;
    }

    _createClass(_class12, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeLong(this.receivedBytes);
        ostr.writeLong(this.sentBytes);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.receivedBytes = istr.readLong();
        this.sentBytes = istr.readLong();
      }
    }]);

    return _class12;
  }(IceMX.Metrics);

  Slice.defineValue(IceMX.ConnectionMetrics, iceC_IceMX_ConnectionMetrics_ids[1], false);
  /* slice2js browser-bundle-skip */

  exports.IceMX = IceMX;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self.Ice._require : window.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : window);
/* slice2js browser-bundle-skip-end */