"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice;

Ice._ModuleRegistry.require(module, ["../Ice/HashMap", "../Ice/Reference", "../Ice/ConnectRequestHandler"]);

var HashMap = Ice.HashMap;
var ConnectRequestHandler = Ice.ConnectRequestHandler;

var RequestHandlerFactory =
/*#__PURE__*/
function () {
  function RequestHandlerFactory(instance) {
    _classCallCheck(this, RequestHandlerFactory);

    this._instance = instance;
    this._handlers = new HashMap(HashMap.compareEquals);
  }

  _createClass(RequestHandlerFactory, [{
    key: "getRequestHandler",
    value: function getRequestHandler(ref, proxy) {
      var connect = false;
      var handler;

      if (ref.getCacheConnection()) {
        handler = this._handlers.get(ref);

        if (!handler) {
          handler = new ConnectRequestHandler(ref, proxy);

          this._handlers.set(ref, handler);

          connect = true;
        }
      } else {
        connect = true;
        handler = new ConnectRequestHandler(ref, proxy);
      }

      if (connect) {
        ref.getConnection().then(function (connection) {
          handler.setConnection(connection);
        }, function (ex) {
          handler.setException(ex);
        });
      }

      return proxy._setRequestHandler(handler.connect(proxy));
    }
  }, {
    key: "removeRequestHandler",
    value: function removeRequestHandler(ref, handler) {
      if (ref.getCacheConnection()) {
        if (this._handlers.get(ref) === handler) {
          this._handlers.delete(ref);
        }
      }
    }
  }]);

  return RequestHandlerFactory;
}();

Ice.RequestHandlerFactory = RequestHandlerFactory;
module.exports.Ice = Ice;