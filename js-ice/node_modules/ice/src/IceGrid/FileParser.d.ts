//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `FileParser.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace IceGrid
{
    /**
     * This exception is raised if an error occurs during parsing.
     */
    class ParseException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason for the failure.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }

    abstract class FileParserPrx extends Ice.ObjectPrx
    {
        /**
         * Parse a file.
         * @param xmlFile Full pathname to the file.
         * @param adminProxy An Admin proxy, used only to retrieve default
         * templates when needed. May be null.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        parse(xmlFile:string, adminProxy:AdminPrx, context?:Map<string, string>):Ice.AsyncResult<ApplicationDescriptor>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):FileParserPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<FileParserPrx>;
    }

    abstract class FileParser extends Ice.Object
    {
        /**
         * <code>icegridadmin</code> provides a {@link FileParser}
         * object to transform XML files into {@link ApplicationDescriptor}
         * objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract parse(xmlFile:string, adminProxy:AdminPrx, current:Ice.Current):PromiseLike<ApplicationDescriptor>|ApplicationDescriptor;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::FileParser".
         */
        static ice_staticId():string;
    }
}
