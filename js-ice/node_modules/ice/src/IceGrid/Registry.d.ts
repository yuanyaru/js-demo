//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Registry.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace IceGrid
{
    /**
     * Determines which load sampling interval to use.
     */
    class LoadSample
    {
        /**
         * Sample every minute.
         */
        static readonly LoadSample1:LoadSample;
        /**
         * Sample every five minutes.
         */
        static readonly LoadSample5:LoadSample;
        /**
         * Sample every fifteen minutes.
         */
        static readonly LoadSample15:LoadSample;
        
        static valueOf(value:number):LoadSample;
        equals(other:any):boolean;
        hashCode():number;
        toString():string;
        
        readonly name:string;
        readonly value:number;
    }

    abstract class QueryPrx extends Ice.ObjectPrx
    {
        /**
         * Find a well-known object by identity.
         * @param id The identity.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findObjectById(id:Ice.Identity, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Find a well-known object by type. If there are several objects
         * registered for the given type, the object is randomly
         * selected.
         * @param type The object type.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findObjectByType(type:string, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Find a well-known object by type on the least-loaded node. If
         * the registry does not know which node hosts the object
         * (for example, because the object was registered with a direct proxy), the
         * registry assumes the object is hosted on a node that has a load
         * average of 1.0.
         * @param type The object type.
         * @param sample The sampling interval.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findObjectByTypeOnLeastLoadedNode(type:string, sample:LoadSample, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Find all the well-known objects with the given type.
         * @param type The object type.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findAllObjectsByType(type:string, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectProxySeq>;
        /**
         * Find all the object replicas associated with the given
         * proxy. If the given proxy is not an indirect proxy from a
         * replica group, an empty sequence is returned.
         * @param proxy The object proxy.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findAllReplicas(proxy:Ice.ObjectPrx, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectProxySeq>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):QueryPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<QueryPrx>;
    }

    abstract class Query extends Ice.Object
    {
        /**
         * The IceGrid query interface. This interface is accessible to
         * Ice clients who wish to look up well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract findObjectById(id:Ice.Identity, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid query interface. This interface is accessible to
         * Ice clients who wish to look up well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract findObjectByType(type:string, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid query interface. This interface is accessible to
         * Ice clients who wish to look up well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract findObjectByTypeOnLeastLoadedNode(type:string, sample:LoadSample, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid query interface. This interface is accessible to
         * Ice clients who wish to look up well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract findAllObjectsByType(type:string, current:Ice.Current):PromiseLike<Ice.ObjectProxySeq>|Ice.ObjectProxySeq;
        /**
         * The IceGrid query interface. This interface is accessible to
         * Ice clients who wish to look up well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract findAllReplicas(proxy:Ice.ObjectPrx, current:Ice.Current):PromiseLike<Ice.ObjectProxySeq>|Ice.ObjectProxySeq;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::Query".
         */
        static ice_staticId():string;
    }

    abstract class RegistryPrx extends Ice.ObjectPrx
    {
        /**
         * Create a client session.
         * @param userId The user id.
         * @param password The password for the given user id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        createSession(userId:string, password:string, context?:Map<string, string>):Ice.AsyncResult<SessionPrx>;
        /**
         * Create an administrative session.
         * @param userId The user id.
         * @param password The password for the given user id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        createAdminSession(userId:string, password:string, context?:Map<string, string>):Ice.AsyncResult<AdminSessionPrx>;
        /**
         * Create a client session from a secure connection.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        createSessionFromSecureConnection(context?:Map<string, string>):Ice.AsyncResult<SessionPrx>;
        /**
         * Create an administrative session from a secure connection.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        createAdminSessionFromSecureConnection(context?:Map<string, string>):Ice.AsyncResult<AdminSessionPrx>;
        /**
         * Get the session timeout. If a client or administrative client
         * doesn't call the session keepAlive method in the time interval
         * defined by this timeout, IceGrid might reap the session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         * @see Session#keepAlive
         * @see AdminSession#keepAlive
         */
        getSessionTimeout(context?:Map<string, string>):Ice.AsyncResult<number>;
        /**
         * Get the value of the ACM timeout. Clients supporting ACM
         * connection heartbeats can enable them instead of explicitly
         * sending keep alives requests.
         *
         * NOTE: This method is only available since Ice 3.6.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getACMTimeout(context?:Map<string, string>):Ice.AsyncResult<number>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):RegistryPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<RegistryPrx>;
    }

    abstract class Registry extends Ice.Object
    {
        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see AdminSession
         */
        abstract createSession(userId:string, password:string, current:Ice.Current):PromiseLike<SessionPrx>|SessionPrx;
        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see AdminSession
         */
        abstract createAdminSession(userId:string, password:string, current:Ice.Current):PromiseLike<AdminSessionPrx>|AdminSessionPrx;
        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see AdminSession
         */
        abstract createSessionFromSecureConnection(current:Ice.Current):PromiseLike<SessionPrx>|SessionPrx;
        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see AdminSession
         */
        abstract createAdminSessionFromSecureConnection(current:Ice.Current):PromiseLike<AdminSessionPrx>|AdminSessionPrx;
        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see AdminSession
         */
        abstract getSessionTimeout(current:Ice.Current):PromiseLike<number>|number;
        /**
         * The IceGrid registry allows clients create sessions
         * directly with the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see AdminSession
         */
        abstract getACMTimeout(current:Ice.Current):PromiseLike<number>|number;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::Registry".
         */
        static ice_staticId():string;
    }

    abstract class LocatorPrx extends Ice.ObjectPrx
    {
        /**
         * Find an object by identity and return a proxy that contains
         * the adapter ID or endpoints which can be used to access the
         * object.
         * @param id The identity.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findObjectById(id:Ice.Identity, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Find an adapter by id and return a proxy that contains
         * its endpoints.
         * @param id The adapter id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        findAdapterById(id:string, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Get the locator registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getRegistry(context?:Map<string, string>):Ice.AsyncResult<Ice.LocatorRegistryPrx>;
        /**
         * Get the proxy of the registry object hosted by this IceGrid
         * registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getLocalRegistry(context?:Map<string, string>):Ice.AsyncResult<RegistryPrx>;
        /**
         * Get the proxy of the query object hosted by this IceGrid
         * registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getLocalQuery(context?:Map<string, string>):Ice.AsyncResult<QueryPrx>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):LocatorPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<LocatorPrx>;
    }

    abstract class Locator extends Ice.Object
    {
        /**
         * The IceGrid locator interface provides access to the {@link Query}
         * and {@link Registry} object of the IceGrid registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Query
         * @see Registry
         */
        abstract findObjectById(id:Ice.Identity, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid locator interface provides access to the {@link Query}
         * and {@link Registry} object of the IceGrid registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Query
         * @see Registry
         */
        abstract findAdapterById(id:string, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid locator interface provides access to the {@link Query}
         * and {@link Registry} object of the IceGrid registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Query
         * @see Registry
         */
        abstract getRegistry(current:Ice.Current):PromiseLike<Ice.LocatorRegistryPrx>|Ice.LocatorRegistryPrx;
        /**
         * The IceGrid locator interface provides access to the {@link Query}
         * and {@link Registry} object of the IceGrid registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Query
         * @see Registry
         */
        abstract getLocalRegistry(current:Ice.Current):PromiseLike<RegistryPrx>|RegistryPrx;
        /**
         * The IceGrid locator interface provides access to the {@link Query}
         * and {@link Registry} object of the IceGrid registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Query
         * @see Registry
         */
        abstract getLocalQuery(current:Ice.Current):PromiseLike<QueryPrx>|QueryPrx;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::Locator".
         */
        static ice_staticId():string;
    }
}
