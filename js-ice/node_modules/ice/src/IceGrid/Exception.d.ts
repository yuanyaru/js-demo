//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace IceGrid
{
    /**
     * This exception is raised if an application does not exist.
     */
    class ApplicationNotExistException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param name The name of the application.
         * @param ice_cause The error that cause this exception.
         */
        constructor(name?:string, ice_cause?:string|Error);
        name:string;
    }

    /**
     * This exception is raised if a server does not exist.
     */
    class ServerNotExistException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The identifier of the server.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:string, ice_cause?:string|Error);
        id:string;
    }

    /**
     * This exception is raised if a server failed to start.
     */
    class ServerStartException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The identifier of the server.
         * @param reason The reason for the failure.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:string, reason?:string, ice_cause?:string|Error);
        id:string;
        reason:string;
    }

    /**
     * This exception is raised if a server failed to stop.
     */
    class ServerStopException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The identifier of the server.
         * @param reason The reason for the failure.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:string, reason?:string, ice_cause?:string|Error);
        id:string;
        reason:string;
    }

    /**
     * This exception is raised if an adapter does not exist.
     */
    class AdapterNotExistException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The id of the object adapter.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:string, ice_cause?:string|Error);
        id:string;
    }

    /**
     * This exception is raised if an object already exists.
     */
    class ObjectExistsException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The identity of the object.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:Ice.Identity, ice_cause?:string|Error);
        id:Ice.Identity;
    }

    /**
     * This exception is raised if an object is not registered.
     */
    class ObjectNotRegisteredException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The identity of the object.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:Ice.Identity, ice_cause?:string|Error);
        id:Ice.Identity;
    }

    /**
     * This exception is raised if a node does not exist.
     */
    class NodeNotExistException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param name The node name.
         * @param ice_cause The error that cause this exception.
         */
        constructor(name?:string, ice_cause?:string|Error);
        name:string;
    }

    /**
     * This exception is raised if a registry does not exist.
     */
    class RegistryNotExistException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param name The registry name.
         * @param ice_cause The error that cause this exception.
         */
        constructor(name?:string, ice_cause?:string|Error);
        name:string;
    }

    /**
     * An exception for deployment errors.
     */
    class DeploymentException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason for the failure.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }

    /**
     * This exception is raised if a node could not be reached.
     */
    class NodeUnreachableException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param name The name of the node that is not reachable.
         * @param reason The reason why the node couldn't be reached.
         * @param ice_cause The error that cause this exception.
         */
        constructor(name?:string, reason?:string, ice_cause?:string|Error);
        name:string;
        reason:string;
    }

    /**
     * This exception is raised if a server could not be reached.
     */
    class ServerUnreachableException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param name The id of the server that is not reachable.
         * @param reason The reason why the server couldn't be reached.
         * @param ice_cause The error that cause this exception.
         */
        constructor(name?:string, reason?:string, ice_cause?:string|Error);
        name:string;
        reason:string;
    }

    /**
     * This exception is raised if a registry could not be reached.
     */
    class RegistryUnreachableException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param name The name of the registry that is not reachable.
         * @param reason The reason why the registry couldn't be reached.
         * @param ice_cause The error that cause this exception.
         */
        constructor(name?:string, reason?:string, ice_cause?:string|Error);
        name:string;
        reason:string;
    }

    /**
     * This exception is raised if an unknown signal was sent to
     * to a server.
     */
    class BadSignalException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The details of the unknown signal.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }

    /**
     * This exception is raised if a patch failed.
     */
    class PatchException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reasons The reasons why the patch failed.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reasons?:Ice.StringSeq, ice_cause?:string|Error);
        reasons:Ice.StringSeq;
    }

    /**
     * This exception is raised if a registry lock wasn't
     * acquired or is already held by a session.
     */
    class AccessDeniedException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param lockUserId The id of the user holding the lock (if any).
         * @param ice_cause The error that cause this exception.
         */
        constructor(lockUserId?:string, ice_cause?:string|Error);
        lockUserId:string;
    }

    /**
     * This exception is raised if the allocation of an object failed.
     */
    class AllocationException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason why the object couldn't be allocated.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }

    /**
     * This exception is raised if the request to allocate an object times
     * out.
     */
    class AllocationTimeoutException extends AllocationException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason why the object couldn't be allocated.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
    }

    /**
     * This exception is raised if a client is denied the ability to create
     * a session with IceGrid.
     */
    class PermissionDeniedException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason why permission was denied.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }

    /**
     * This exception is raised if an observer is already registered with
     * the registry.
     * @see AdminSession#setObservers
     * @see AdminSession#setObserversByIdentity
     */
    class ObserverAlreadyRegisteredException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param id The identity of the observer.
         * @param ice_cause The error that cause this exception.
         */
        constructor(id?:Ice.Identity, ice_cause?:string|Error);
        id:Ice.Identity;
    }

    /**
     * This exception is raised if a file is not available.
     * @see AdminSession#openServerStdOut
     * @see AdminSession#openServerStdErr
     * @see AdminSession#openNodeStdOut
     * @see AdminSession#openNodeStdErr
     * @see AdminSession#openRegistryStdOut
     * @see AdminSession#openRegistryStdErr
     */
    class FileNotAvailableException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason for the failure.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }
}
