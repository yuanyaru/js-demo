//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace IceGrid
{
    /**
     * An enumeration representing the state of the server.
     */
    class ServerState
    {
        /**
         * The server is not running.
         */
        static readonly Inactive:ServerState;
        /**
         * The server is being activated and will change to the active
         * state when the registered server object adapters are activated
         * or to the activation timed out state if the activation timeout
         * expires.
         */
        static readonly Activating:ServerState;
        /**
         * The activation timed out state indicates that the server
         * activation timed out.
         */
        static readonly ActivationTimedOut:ServerState;
        /**
         * The server is running.
         */
        static readonly Active:ServerState;
        /**
         * The server is being deactivated.
         */
        static readonly Deactivating:ServerState;
        /**
         * The server is being destroyed.
         */
        static readonly Destroying:ServerState;
        /**
         * The server is destroyed.
         */
        static readonly Destroyed:ServerState;
        
        static valueOf(value:number):ServerState;
        equals(other:any):boolean;
        hashCode():number;
        toString():string;
        
        readonly name:string;
        readonly value:number;
    }

    /**
     * A dictionary of proxies.
     */
    class StringObjectProxyDict extends Map<string, Ice.ObjectPrx>
    {
    }

    class StringObjectProxyDictHelper
    {
        static write(outs:Ice.OutputStream, value:StringObjectProxyDict):void;
        static read(ins:Ice.InputStream):StringObjectProxyDict;
    }

    /**
     * Information about an Ice object.
     */
    class ObjectInfo
    {
        constructor(proxy?:Ice.ObjectPrx, type?:string);
        clone():ObjectInfo;
        equals(rhs:any):boolean;
        proxy:Ice.ObjectPrx;
        type:string;
        static write(outs:Ice.OutputStream, value:ObjectInfo):void;
        static read(ins:Ice.InputStream):ObjectInfo;
    }

    /**
     * A sequence of object information structures.
     */
    type ObjectInfoSeq = ObjectInfo[];

    class ObjectInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:ObjectInfoSeq):void;
        static read(ins:Ice.InputStream):ObjectInfoSeq;
    }

    /**
     * Information about an adapter registered with the IceGrid registry.
     */
    class AdapterInfo
    {
        constructor(id?:string, proxy?:Ice.ObjectPrx, replicaGroupId?:string);
        clone():AdapterInfo;
        equals(rhs:any):boolean;
        id:string;
        proxy:Ice.ObjectPrx;
        replicaGroupId:string;
        static write(outs:Ice.OutputStream, value:AdapterInfo):void;
        static read(ins:Ice.InputStream):AdapterInfo;
    }

    /**
     * A sequence of adapter information structures.
     */
    type AdapterInfoSeq = AdapterInfo[];

    class AdapterInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:AdapterInfoSeq):void;
        static read(ins:Ice.InputStream):AdapterInfoSeq;
    }

    /**
     * Information about a server managed by an IceGrid node.
     */
    class ServerInfo
    {
        constructor(application?:string, uuid?:string, revision?:number, node?:string, descriptor?:IceGrid.ServerDescriptor, sessionId?:string);
        clone():ServerInfo;
        equals(rhs:any):boolean;
        application:string;
        uuid:string;
        revision:number;
        node:string;
        descriptor:IceGrid.ServerDescriptor;
        sessionId:string;
        static write(outs:Ice.OutputStream, value:ServerInfo):void;
        static read(ins:Ice.InputStream):ServerInfo;
    }

    /**
     * Information about an IceGrid node.
     */
    class NodeInfo
    {
        constructor(name?:string, os?:string, hostname?:string, release?:string, version?:string, machine?:string, nProcessors?:number, dataDir?:string);
        clone():NodeInfo;
        equals(rhs:any):boolean;
        hashCode():number;
        name:string;
        os:string;
        hostname:string;
        release:string;
        version:string;
        machine:string;
        nProcessors:number;
        dataDir:string;
        static write(outs:Ice.OutputStream, value:NodeInfo):void;
        static read(ins:Ice.InputStream):NodeInfo;
    }

    /**
     * Information about an IceGrid registry replica.
     */
    class RegistryInfo
    {
        constructor(name?:string, hostname?:string);
        clone():RegistryInfo;
        equals(rhs:any):boolean;
        hashCode():number;
        name:string;
        hostname:string;
        static write(outs:Ice.OutputStream, value:RegistryInfo):void;
        static read(ins:Ice.InputStream):RegistryInfo;
    }

    /**
     * A sequence of {@link RegistryInfo} structures.
     */
    type RegistryInfoSeq = RegistryInfo[];

    class RegistryInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:RegistryInfoSeq):void;
        static read(ins:Ice.InputStream):RegistryInfoSeq;
    }

    /**
     * Information about the load of a node.
     */
    class LoadInfo
    {
        constructor(avg1?:number, avg5?:number, avg15?:number);
        clone():LoadInfo;
        equals(rhs:any):boolean;
        avg1:number;
        avg5:number;
        avg15:number;
        static write(outs:Ice.OutputStream, value:LoadInfo):void;
        static read(ins:Ice.InputStream):LoadInfo;
    }

    /**
     * Information about an IceGrid application.
     */
    class ApplicationInfo
    {
        constructor(uuid?:string, createTime?:Ice.Long, createUser?:string, updateTime?:Ice.Long, updateUser?:string, revision?:number, descriptor?:ApplicationDescriptor);
        clone():ApplicationInfo;
        equals(rhs:any):boolean;
        uuid:string;
        createTime:Ice.Long;
        createUser:string;
        updateTime:Ice.Long;
        updateUser:string;
        revision:number;
        descriptor:ApplicationDescriptor;
        static write(outs:Ice.OutputStream, value:ApplicationInfo):void;
        static read(ins:Ice.InputStream):ApplicationInfo;
    }

    /**
     * A sequence of {@link ApplicationInfo} structures.
     */
    type ApplicationInfoSeq = ApplicationInfo[];

    class ApplicationInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:ApplicationInfoSeq):void;
        static read(ins:Ice.InputStream):ApplicationInfoSeq;
    }

    /**
     * Information about updates to an IceGrid application.
     */
    class ApplicationUpdateInfo
    {
        constructor(updateTime?:Ice.Long, updateUser?:string, revision?:number, descriptor?:ApplicationUpdateDescriptor);
        clone():ApplicationUpdateInfo;
        equals(rhs:any):boolean;
        updateTime:Ice.Long;
        updateUser:string;
        revision:number;
        descriptor:ApplicationUpdateDescriptor;
        static write(outs:Ice.OutputStream, value:ApplicationUpdateInfo):void;
        static read(ins:Ice.InputStream):ApplicationUpdateInfo;
    }

    abstract class AdminPrx extends Ice.ObjectPrx
    {
        /**
         * Add an application to IceGrid.
         * @param descriptor The application descriptor.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        addApplication(descriptor:ApplicationDescriptor, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Synchronize a deployed application with the given application
         * descriptor. This operation will replace the current descriptor
         * with this new descriptor.
         * @param descriptor The application descriptor.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        syncApplication(descriptor:ApplicationDescriptor, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Update a deployed application with the given update application
         * descriptor.
         * @param descriptor The update descriptor.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        updateApplication(descriptor:ApplicationUpdateDescriptor, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Synchronize a deployed application with the given application
         * descriptor. This operation will replace the current descriptor
         * with this new descriptor only if no server restarts are
         * necessary for the update of the application. If some servers
         * need to be restarted, the synchronization is rejected with a
         * DeploymentException.
         * @param descriptor The application descriptor.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        syncApplicationWithoutRestart(descriptor:ApplicationDescriptor, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Update a deployed application with the given update application
         * descriptor only if no server restarts are necessary for the
         * update of the application. If some servers need to be
         * restarted, the synchronization is rejected with a
         * DeploymentException.
         * @param descriptor The update descriptor.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        updateApplicationWithoutRestart(descriptor:ApplicationUpdateDescriptor, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Remove an application from IceGrid.
         * @param name The application name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        removeApplication(name:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Instantiate a server template from an application on the given
         * node.
         * @param application The application name.
         * @param node The name of the node where the server will be
         * deployed.
         * @param desc The descriptor of the server instance to deploy.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        instantiateServer(application:string, node:string, desc:ServerInstanceDescriptor, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Patch the given application data.
         * @param name The application name.
         * @param shutdown If true, the servers depending on the data to
         * patch will be shut down if necessary.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        patchApplication(name:string, shutdown:boolean, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get an application descriptor.
         * @param name The application name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getApplicationInfo(name:string, context?:Map<string, string>):Ice.AsyncResult<ApplicationInfo>;
        /**
         * Get the default application descriptor.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getDefaultApplicationDescriptor(context?:Map<string, string>):Ice.AsyncResult<ApplicationDescriptor>;
        /**
         * Get all the IceGrid applications currently registered.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAllApplicationNames(context?:Map<string, string>):Ice.AsyncResult<Ice.StringSeq>;
        /**
         * Get the server information for the server with the given id.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerInfo(id:string, context?:Map<string, string>):Ice.AsyncResult<ServerInfo>;
        /**
         * Get a server's state.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerState(id:string, context?:Map<string, string>):Ice.AsyncResult<ServerState>;
        /**
         * Get a server's system process id. The process id is operating
         * system dependent.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerPid(id:string, context?:Map<string, string>):Ice.AsyncResult<number>;
        /**
         * Get the category for server admin objects. You can manufacture a server admin
         * proxy from the admin proxy by changing its identity: use the server ID as name
         * and the returned category as category.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerAdminCategory(context?:Map<string, string>):Ice.AsyncResult<string>;
        /**
         * Get a proxy to the server's admin object.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerAdmin(id:string, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Enable or disable a server. A disabled server can't be started
         * on demand or administratively. The enable state of the server
         * is not persistent: if the node is shut down and restarted, the
         * server will be enabled by default.
         * @param id The server id.
         * @param enabled True to enable the server, false to disable it.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        enableServer(id:string, enabled:boolean, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Check if the server is enabled or disabled.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        isServerEnabled(id:string, context?:Map<string, string>):Ice.AsyncResult<boolean>;
        /**
         * Start a server and wait for its activation.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        startServer(id:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Stop a server.
         * @param id The server id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        stopServer(id:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Patch a server.
         * @param id The server id.
         * @param shutdown If true, servers depending on the data to patch
         * will be shut down if necessary.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        patchServer(id:string, shutdown:boolean, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Send signal to a server.
         * @param id The server id.
         * @param signal The signal, for example SIGTERM or 15.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        sendSignal(id:string, signal:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get all the server ids registered with IceGrid.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAllServerIds(context?:Map<string, string>):Ice.AsyncResult<Ice.StringSeq>;
        /**
         * Get the adapter information for the replica group or adapter
         * with the given id.
         * @param id The adapter id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAdapterInfo(id:string, context?:Map<string, string>):Ice.AsyncResult<AdapterInfoSeq>;
        /**
         * Remove the adapter with the given id.
         * @param id The adapter id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        removeAdapter(id:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get all the adapter ids registered with IceGrid.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAllAdapterIds(context?:Map<string, string>):Ice.AsyncResult<Ice.StringSeq>;
        /**
         * Add an object to the object registry. IceGrid will get the
         * object type by calling <code>ice_id</code> on the given proxy. The object
         * must be reachable.
         * @param obj The object to be added to the registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        addObject(obj:Ice.ObjectPrx, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Update an object in the object registry. Only objects added
         * with this interface can be updated with this operation. Objects
         * added with deployment descriptors should be updated with the
         * deployment mechanism.
         * @param obj The object to be updated to the registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        updateObject(obj:Ice.ObjectPrx, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Add an object to the object registry and explicitly specify
         * its type.
         * @param obj The object to be added to the registry.
         * @param type The object type.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        addObjectWithType(obj:Ice.ObjectPrx, type:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Remove an object from the object registry. Only objects added
         * with this interface can be removed with this operation. Objects
         * added with deployment descriptors should be removed with the
         * deployment mechanism.
         * @param id The identity of the object to be removed from the
         * registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        removeObject(id:Ice.Identity, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get the object info for the object with the given identity.
         * @param id The identity of the object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getObjectInfo(id:Ice.Identity, context?:Map<string, string>):Ice.AsyncResult<ObjectInfo>;
        /**
         * Get the object info of all the registered objects with the
         * given type.
         * @param type The type of the object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getObjectInfosByType(type:string, context?:Map<string, string>):Ice.AsyncResult<ObjectInfoSeq>;
        /**
         * Get the object info of all the registered objects whose stringified
         * identities match the given expression.
         * @param expr The expression to match against the stringified
         * identities of registered objects. The expression may contain
         * a trailing wildcard (<code>*</code>) character.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAllObjectInfos(expr:string, context?:Map<string, string>):Ice.AsyncResult<ObjectInfoSeq>;
        /**
         * Ping an IceGrid node to see if it is active.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        pingNode(name:string, context?:Map<string, string>):Ice.AsyncResult<boolean>;
        /**
         * Get the load averages of the node.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getNodeLoad(name:string, context?:Map<string, string>):Ice.AsyncResult<LoadInfo>;
        /**
         * Get the node information for the node with the given name.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getNodeInfo(name:string, context?:Map<string, string>):Ice.AsyncResult<NodeInfo>;
        /**
         * Get a proxy to the IceGrid node's admin object.
         * @param name The IceGrid node name
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getNodeAdmin(name:string, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Get the number of physical processor sockets for the machine
         * running the node with the given name.
         *
         * Note that this method will return 1 on operating systems where
         * this can't be automatically determined and where the
         * IceGrid.Node.ProcessorSocketCount property for the node is not
         * set.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getNodeProcessorSocketCount(name:string, context?:Map<string, string>):Ice.AsyncResult<number>;
        /**
         * Shutdown an IceGrid node.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        shutdownNode(name:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get the hostname of this node.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getNodeHostname(name:string, context?:Map<string, string>):Ice.AsyncResult<string>;
        /**
         * Get all the IceGrid nodes currently registered.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAllNodeNames(context?:Map<string, string>):Ice.AsyncResult<Ice.StringSeq>;
        /**
         * Ping an IceGrid registry to see if it is active.
         * @param name The registry name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        pingRegistry(name:string, context?:Map<string, string>):Ice.AsyncResult<boolean>;
        /**
         * Get the registry information for the registry with the given name.
         * @param name The registry name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getRegistryInfo(name:string, context?:Map<string, string>):Ice.AsyncResult<RegistryInfo>;
        /**
         * Get a proxy to the IceGrid registry's admin object.
         * @param name The registry name
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getRegistryAdmin(name:string, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Shutdown an IceGrid registry.
         * @param name The registry name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        shutdownRegistry(name:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get all the IceGrid registries currently registered.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAllRegistryNames(context?:Map<string, string>):Ice.AsyncResult<Ice.StringSeq>;
        /**
         * Shut down the IceGrid registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        shutdown(context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Returns the checksums for the IceGrid Slice definitions.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getSliceChecksums(context?:Map<string, string>):Ice.AsyncResult<Ice.SliceChecksumDict>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):AdminPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<AdminPrx>;
    }

    abstract class Admin extends Ice.Object
    {
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract addApplication(descriptor:ApplicationDescriptor, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract syncApplication(descriptor:ApplicationDescriptor, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract updateApplication(descriptor:ApplicationUpdateDescriptor, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract syncApplicationWithoutRestart(descriptor:ApplicationDescriptor, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract updateApplicationWithoutRestart(descriptor:ApplicationUpdateDescriptor, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract removeApplication(name:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract instantiateServer(application:string, node:string, desc:ServerInstanceDescriptor, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract patchApplication(name:string, shutdown:boolean, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getApplicationInfo(name:string, current:Ice.Current):PromiseLike<ApplicationInfo>|ApplicationInfo;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getDefaultApplicationDescriptor(current:Ice.Current):PromiseLike<ApplicationDescriptor>|ApplicationDescriptor;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAllApplicationNames(current:Ice.Current):PromiseLike<Ice.StringSeq>|Ice.StringSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerInfo(id:string, current:Ice.Current):PromiseLike<ServerInfo>|ServerInfo;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerState(id:string, current:Ice.Current):PromiseLike<ServerState>|ServerState;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerPid(id:string, current:Ice.Current):PromiseLike<number>|number;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerAdminCategory(current:Ice.Current):PromiseLike<string>|string;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerAdmin(id:string, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract enableServer(id:string, enabled:boolean, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract isServerEnabled(id:string, current:Ice.Current):PromiseLike<boolean>|boolean;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract startServer(id:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract stopServer(id:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract patchServer(id:string, shutdown:boolean, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract sendSignal(id:string, signal:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAllServerIds(current:Ice.Current):PromiseLike<Ice.StringSeq>|Ice.StringSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAdapterInfo(id:string, current:Ice.Current):PromiseLike<AdapterInfoSeq>|AdapterInfoSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract removeAdapter(id:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAllAdapterIds(current:Ice.Current):PromiseLike<Ice.StringSeq>|Ice.StringSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract addObject(obj:Ice.ObjectPrx, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract updateObject(obj:Ice.ObjectPrx, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract addObjectWithType(obj:Ice.ObjectPrx, type:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract removeObject(id:Ice.Identity, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getObjectInfo(id:Ice.Identity, current:Ice.Current):PromiseLike<ObjectInfo>|ObjectInfo;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getObjectInfosByType(type:string, current:Ice.Current):PromiseLike<ObjectInfoSeq>|ObjectInfoSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAllObjectInfos(expr:string, current:Ice.Current):PromiseLike<ObjectInfoSeq>|ObjectInfoSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract pingNode(name:string, current:Ice.Current):PromiseLike<boolean>|boolean;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getNodeLoad(name:string, current:Ice.Current):PromiseLike<LoadInfo>|LoadInfo;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getNodeInfo(name:string, current:Ice.Current):PromiseLike<NodeInfo>|NodeInfo;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getNodeAdmin(name:string, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getNodeProcessorSocketCount(name:string, current:Ice.Current):PromiseLike<number>|number;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract shutdownNode(name:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getNodeHostname(name:string, current:Ice.Current):PromiseLike<string>|string;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAllNodeNames(current:Ice.Current):PromiseLike<Ice.StringSeq>|Ice.StringSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract pingRegistry(name:string, current:Ice.Current):PromiseLike<boolean>|boolean;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getRegistryInfo(name:string, current:Ice.Current):PromiseLike<RegistryInfo>|RegistryInfo;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getRegistryAdmin(name:string, current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract shutdownRegistry(name:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getAllRegistryNames(current:Ice.Current):PromiseLike<Ice.StringSeq>|Ice.StringSeq;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract shutdown(current:Ice.Current):PromiseLike<void>|void;
        /**
         * The IceGrid administrative interface.
         * <p class="Warning">Allowing access to this interface
         * is a security risk! Please see the IceGrid documentation
         * for further information.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getSliceChecksums(current:Ice.Current):PromiseLike<Ice.SliceChecksumDict>|Ice.SliceChecksumDict;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::Admin".
         */
        static ice_staticId():string;
    }

    abstract class FileIteratorPrx extends Ice.ObjectPrx
    {
        /**
         * Read lines from the log file.
         * @param size Specifies the maximum number of bytes to be
         * received. The server will ensure that the returned message
         * doesn't exceed the given size.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        read(size:number, context?:Map<string, string>):Ice.AsyncResult<[boolean, Ice.StringSeq]>;
        /**
         * Destroy the iterator.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        destroy(context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):FileIteratorPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
    }

    abstract class FileIterator extends Ice.Object
    {
        /**
         * This interface provides access to IceGrid log file contents.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract read(size:number, current:Ice.Current):PromiseLike<[boolean, Ice.StringSeq]>|[boolean, Ice.StringSeq];
        /**
         * This interface provides access to IceGrid log file contents.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract destroy(current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::FileIterator".
         */
        static ice_staticId():string;
    }

    /**
     * Dynamic information about the state of a server.
     */
    class ServerDynamicInfo
    {
        constructor(id?:string, state?:ServerState, pid?:number, enabled?:boolean);
        clone():ServerDynamicInfo;
        equals(rhs:any):boolean;
        hashCode():number;
        id:string;
        state:ServerState;
        pid:number;
        enabled:boolean;
        static write(outs:Ice.OutputStream, value:ServerDynamicInfo):void;
        static read(ins:Ice.InputStream):ServerDynamicInfo;
    }

    /**
     * A sequence of server dynamic information structures.
     */
    type ServerDynamicInfoSeq = ServerDynamicInfo[];

    class ServerDynamicInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:ServerDynamicInfoSeq):void;
        static read(ins:Ice.InputStream):ServerDynamicInfoSeq;
    }

    /**
     * Dynamic information about the state of an adapter.
     */
    class AdapterDynamicInfo
    {
        constructor(id?:string, proxy?:Ice.ObjectPrx);
        clone():AdapterDynamicInfo;
        equals(rhs:any):boolean;
        id:string;
        proxy:Ice.ObjectPrx;
        static write(outs:Ice.OutputStream, value:AdapterDynamicInfo):void;
        static read(ins:Ice.InputStream):AdapterDynamicInfo;
    }

    /**
     * A sequence of adapter dynamic information structures.
     */
    type AdapterDynamicInfoSeq = AdapterDynamicInfo[];

    class AdapterDynamicInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:AdapterDynamicInfoSeq):void;
        static read(ins:Ice.InputStream):AdapterDynamicInfoSeq;
    }

    /**
     * Dynamic information about the state of a node.
     */
    class NodeDynamicInfo
    {
        constructor(info?:NodeInfo, servers?:ServerDynamicInfoSeq, adapters?:AdapterDynamicInfoSeq);
        clone():NodeDynamicInfo;
        equals(rhs:any):boolean;
        info:NodeInfo;
        servers:ServerDynamicInfoSeq;
        adapters:AdapterDynamicInfoSeq;
        static write(outs:Ice.OutputStream, value:NodeDynamicInfo):void;
        static read(ins:Ice.InputStream):NodeDynamicInfo;
    }

    abstract class RegistryObserverPrx extends Ice.ObjectPrx
    {
        /**
         * The <code>registryInit</code> operation is called after registration of
         * an observer to indicate the state of the registries.
         * @param registries The current state of the registries.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        registryInit(registries:RegistryInfoSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>nodeUp</code> operation is called to notify an observer that a node
         * came up.
         * @param node The node state.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        registryUp(node:RegistryInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>nodeDown</code> operation is called to notify an observer that a node
         * went down.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        registryDown(name:string, context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):RegistryObserverPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<RegistryObserverPrx>;
    }

    abstract class RegistryObserver extends Ice.Object
    {
        /**
         * This interface allows applications to monitor changes the state
         * of the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract registryInit(registries:RegistryInfoSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor changes the state
         * of the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract registryUp(node:RegistryInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor changes the state
         * of the registry.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract registryDown(name:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::RegistryObserver".
         */
        static ice_staticId():string;
    }

    /**
     * A sequence of node dynamic information structures.
     */
    type NodeDynamicInfoSeq = NodeDynamicInfo[];

    class NodeDynamicInfoSeqHelper
    {
        static write(outs:Ice.OutputStream, value:NodeDynamicInfoSeq):void;
        static read(ins:Ice.InputStream):NodeDynamicInfoSeq;
    }

    abstract class NodeObserverPrx extends Ice.ObjectPrx
    {
        /**
         * The <code>nodeInit</code> operation indicates the current state
         * of nodes. It is called after the registration of an observer.
         * @param nodes The current state of the nodes.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        nodeInit(nodes:NodeDynamicInfoSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>nodeUp</code> operation is called to notify an observer that a node
         * came up.
         * @param node The node state.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        nodeUp(node:NodeDynamicInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>nodeDown</code> operation is called to notify an observer that a node
         * went down.
         * @param name The node name.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        nodeDown(name:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>updateServer</code> operation is called to notify an observer that
         * the state of a server changed.
         * @param node The node hosting the server.
         * @param updatedInfo The new server state.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        updateServer(node:string, updatedInfo:ServerDynamicInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>updateAdapter</code> operation is called to notify an observer that
         * the state of an adapter changed.
         * @param node The node hosting the adapter.
         * @param updatedInfo The new adapter state.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        updateAdapter(node:string, updatedInfo:AdapterDynamicInfo, context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):NodeObserverPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<NodeObserverPrx>;
    }

    abstract class NodeObserver extends Ice.Object
    {
        /**
         * The node observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * nodes.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract nodeInit(nodes:NodeDynamicInfoSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The node observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * nodes.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract nodeUp(node:NodeDynamicInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The node observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * nodes.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract nodeDown(name:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The node observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * nodes.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract updateServer(node:string, updatedInfo:ServerDynamicInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The node observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * nodes.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract updateAdapter(node:string, updatedInfo:AdapterDynamicInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::NodeObserver".
         */
        static ice_staticId():string;
    }

    abstract class ApplicationObserverPrx extends Ice.ObjectPrx
    {
        /**
         * <code>applicationInit</code> is called after the registration
         * of an observer to indicate the state of the registry.
         * @param serial The current serial number of the registry
         * database. This serial number allows observers to make sure that
         * their internal state is synchronized with the registry.
         * @param applications The applications currently registered with
         * the registry.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        applicationInit(serial:number, applications:ApplicationInfoSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>applicationAdded</code> operation is called to notify an observer
         * that an application was added.
         * @param serial The new serial number of the registry database.
         * @param desc The descriptor of the new application.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        applicationAdded(serial:number, desc:ApplicationInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>applicationRemoved</code> operation is called to notify an observer
         * that an application was removed.
         * @param serial The new serial number of the registry database.
         * @param name The name of the application that was removed.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        applicationRemoved(serial:number, name:string, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>applicationUpdated</code> operation is called to notify an observer
         * that an application was updated.
         * @param serial The new serial number of the registry database.
         * @param desc The descriptor of the update.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        applicationUpdated(serial:number, desc:ApplicationUpdateInfo, context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):ApplicationObserverPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<ApplicationObserverPrx>;
    }

    abstract class ApplicationObserver extends Ice.Object
    {
        /**
         * The database observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * registry database.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract applicationInit(serial:number, applications:ApplicationInfoSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The database observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * registry database.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract applicationAdded(serial:number, desc:ApplicationInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The database observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * registry database.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract applicationRemoved(serial:number, name:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * The database observer interface. Observers should implement this
         * interface to receive information about the state of the IceGrid
         * registry database.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract applicationUpdated(serial:number, desc:ApplicationUpdateInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::ApplicationObserver".
         */
        static ice_staticId():string;
    }

    abstract class AdapterObserverPrx extends Ice.ObjectPrx
    {
        /**
         * <code>adapterInit</code> is called after registration of
         * an observer to indicate the state of the registry.
         * @param adpts The adapters that were dynamically registered
         * with the registry (not through the deployment mechanism).
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        adapterInit(adpts:AdapterInfoSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>adapterAdded</code> operation is called to notify an observer when
         * a dynamically-registered adapter was added.
         * @param info The details of the new adapter.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        adapterAdded(info:AdapterInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The adapterUpdated operation is called to notify an observer when
         * a dynamically-registered adapter was updated.
         * @param info The details of the updated adapter.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        adapterUpdated(info:AdapterInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The adapterRemoved operation is called to notify an observer when
         * a dynamically-registered adapter was removed.
         * @param id The ID of the removed adapter.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        adapterRemoved(id:string, context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):AdapterObserverPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<AdapterObserverPrx>;
    }

    abstract class AdapterObserver extends Ice.Object
    {
        /**
         * This interface allows applications to monitor the state of object
         * adapters that are registered with IceGrid.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract adapterInit(adpts:AdapterInfoSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor the state of object
         * adapters that are registered with IceGrid.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract adapterAdded(info:AdapterInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor the state of object
         * adapters that are registered with IceGrid.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract adapterUpdated(info:AdapterInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor the state of object
         * adapters that are registered with IceGrid.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract adapterRemoved(id:string, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::AdapterObserver".
         */
        static ice_staticId():string;
    }

    abstract class ObjectObserverPrx extends Ice.ObjectPrx
    {
        /**
         * <code>objectInit</code> is called after the registration of
         * an observer to indicate the state of the registry.
         * @param objects The objects registered with the {@link Admin}
         * interface (not through the deployment mechanism).
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        objectInit(objects:ObjectInfoSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * The <code>objectAdded</code> operation is called to notify an observer when an
         * object was added to the {@link Admin} interface.
         * @param info The details of the added object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        objectAdded(info:ObjectInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * <code>objectUpdated</code> is called to notify an observer when
         * an object registered with the {@link Admin} interface was updated.
         * @param info The details of the updated object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        objectUpdated(info:ObjectInfo, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * <code>objectRemoved</code> is called to notify an observer when
         * an object registered with the {@link Admin} interface was removed.
         * @param id The identity of the removed object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        objectRemoved(id:Ice.Identity, context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):ObjectObserverPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<ObjectObserverPrx>;
    }

    abstract class ObjectObserver extends Ice.Object
    {
        /**
         * This interface allows applications to monitor IceGrid well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract objectInit(objects:ObjectInfoSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor IceGrid well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract objectAdded(info:ObjectInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor IceGrid well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract objectUpdated(info:ObjectInfo, current:Ice.Current):PromiseLike<void>|void;
        /**
         * This interface allows applications to monitor IceGrid well-known objects.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract objectRemoved(id:Ice.Identity, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::ObjectObserver".
         */
        static ice_staticId():string;
    }

    abstract class AdminSessionPrx extends Ice.ObjectPrx
    {
        /**
         * Destroy the session. This is called automatically when the router is destroyed.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        destroy(context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Keep the session alive. Clients should call this operation
         * regularly to prevent the server from reaping the session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         * @see Registry#getSessionTimeout
         */
        keepAlive(context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get the admin interface. The admin object returned by this
         * operation can only be accessed by the session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAdmin(context?:Map<string, string>):Ice.AsyncResult<AdminPrx>;
        /**
         * Get a "template" proxy for admin callback objects.
         * An Admin client uses this proxy to set the category of its callback
         * objects, and the published endpoints of the object adapter hosting
         * the admin callback objects.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getAdminCallbackTemplate(context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Set the observer proxies that receive
         * notifications when the state of the registry
         * or nodes changes.
         * @param registryObs The registry observer.
         * @param nodeObs The node observer.
         * @param appObs The application observer.
         * @param adptObs The adapter observer.
         * @param objObs The object observer.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        setObservers(registryObs:RegistryObserverPrx, nodeObs:NodeObserverPrx, appObs:ApplicationObserverPrx, adptObs:AdapterObserverPrx, objObs:ObjectObserverPrx, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Set the observer identities that receive
         * notifications the state of the registry
         * or nodes changes. This operation should be used by clients that
         * are using a bidirectional connection to communicate with the
         * session.
         * @param registryObs The registry observer identity.
         * @param nodeObs The node observer identity.
         * @param appObs The application observer.
         * @param adptObs The adapter observer.
         * @param objObs The object observer.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        setObserversByIdentity(registryObs:Ice.Identity, nodeObs:Ice.Identity, appObs:Ice.Identity, adptObs:Ice.Identity, objObs:Ice.Identity, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Acquires an exclusive lock to start updating the registry applications.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        startUpdate(context?:Map<string, string>):Ice.AsyncResult<number>;
        /**
         * Finish updating the registry and release the exclusive lock.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        finishUpdate(context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get the name of the registry replica hosting this session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getReplicaName(context?:Map<string, string>):Ice.AsyncResult<string>;
        /**
         * Open the given server log file for reading. The file can be
         * read with the returned file iterator.
         * @param id The server id.
         * @param path The path of the log file. A log file can be opened
         * only if it's declared in the server or service deployment
         * descriptor.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openServerLog(id:string, path:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
        /**
         * Open the given server stderr file for reading. The file can be
         * read with the returned file iterator.
         * @param id The server id.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openServerStdErr(id:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
        /**
         * Open the given server stdout file for reading. The file can be
         * read with the returned file iterator.
         * @param id The server id.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openServerStdOut(id:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
        /**
         * Open the given node stderr file for reading. The file can be
         * read with the returned file iterator.
         * @param name The node name.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openNodeStdErr(name:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
        /**
         * Open the given node stdout file for reading. The file can be
         * read with the returned file iterator.
         * @param name The node name.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openNodeStdOut(name:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
        /**
         * Open the given registry stderr file for reading. The file can be
         * read with the returned file iterator.
         * @param name The registry name.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openRegistryStdErr(name:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;
        /**
         * Open the given registry stdout file for reading. The file can be
         * read with the returned file iterator.
         * @param name The registry name.
         * @param count Specifies where to start reading the file. If
         * negative, the file is read from the begining. If 0 or positive,
         * the file is read from the last <code>count</code> lines.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        openRegistryStdOut(name:string, count:number, context?:Map<string, string>):Ice.AsyncResult<FileIteratorPrx>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):AdminSessionPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<AdminSessionPrx>;
    }

    abstract class AdminSession extends Ice.Object
    {
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract destroy(current:Ice.Current):PromiseLike<void>|void;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract keepAlive(current:Ice.Current):PromiseLike<void>|void;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract getAdmin(current:Ice.Current):PromiseLike<AdminPrx>|AdminPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract getAdminCallbackTemplate(current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract setObservers(registryObs:RegistryObserverPrx, nodeObs:NodeObserverPrx, appObs:ApplicationObserverPrx, adptObs:AdapterObserverPrx, objObs:ObjectObserverPrx, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract setObserversByIdentity(registryObs:Ice.Identity, nodeObs:Ice.Identity, appObs:Ice.Identity, adptObs:Ice.Identity, objObs:Ice.Identity, current:Ice.Current):PromiseLike<void>|void;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract startUpdate(current:Ice.Current):PromiseLike<number>|number;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract finishUpdate(current:Ice.Current):PromiseLike<void>|void;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract getReplicaName(current:Ice.Current):PromiseLike<string>|string;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openServerLog(id:string, path:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openServerStdErr(id:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openServerStdOut(id:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openNodeStdErr(name:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openNodeStdOut(name:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openRegistryStdErr(name:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Used by administrative clients to view,
         * update, and receive observer updates from the IceGrid
         * registry. Admin sessions are created either via the {@link Registry}
         * object or via the registry admin <code>SessionManager</code> object.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Registry
         */
        abstract openRegistryStdOut(name:string, count:number, current:Ice.Current):PromiseLike<FileIteratorPrx>|FileIteratorPrx;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::IceGrid::AdminSession".
         */
        static ice_staticId():string;
    }
}
