//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace Glacier2
{
    /**
     * This exception is raised if an attempt to create a new session failed.
     */
    class CannotCreateSessionException extends Ice.UserException
    {
        /**
         * One-shot constructor to initialize all data members.
         * @param reason The reason why session creation has failed.
         * @param ice_cause The error that cause this exception.
         */
        constructor(reason?:string, ice_cause?:string|Error);
        reason:string;
    }

    abstract class SessionPrx extends Ice.ObjectPrx
    {
        /**
         * Destroy the session. This is called automatically when the router is destroyed.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        destroy(context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):SessionPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<SessionPrx>;
    }

    abstract class Session extends Ice.Object
    {
        /**
         * A client-visible session object, which is tied to the lifecycle of a {@link Router}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Router
         * @see SessionManager
         */
        abstract destroy(current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::Session".
         */
        static ice_staticId():string;
    }

    abstract class StringSetPrx extends Ice.ObjectPrx
    {
        /**
         * Add a sequence of strings to this set of constraints. Order is
         * not preserved and duplicates are implicitly removed.
         * @param additions The sequence of strings to be added.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        add(additions:Ice.StringSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Remove a sequence of strings from this set of constraints. No
         * errors are returned if an entry is not found.
         * @param deletions The sequence of strings to be removed.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        remove(deletions:Ice.StringSeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Returns a sequence of strings describing the constraints in this
         * set.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        get(context?:Map<string, string>):Ice.AsyncResult<Ice.StringSeq>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):StringSetPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<StringSetPrx>;
    }

    abstract class StringSet extends Ice.Object
    {
        /**
         * An object for managing the set of identity constraints for specific
         * parts of object identity on a
         * {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see SessionControl
         */
        abstract add(additions:Ice.StringSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * An object for managing the set of identity constraints for specific
         * parts of object identity on a
         * {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see SessionControl
         */
        abstract remove(deletions:Ice.StringSeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * An object for managing the set of identity constraints for specific
         * parts of object identity on a
         * {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see SessionControl
         */
        abstract get(current:Ice.Current):PromiseLike<Ice.StringSeq>|Ice.StringSeq;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::StringSet".
         */
        static ice_staticId():string;
    }

    abstract class IdentitySetPrx extends Ice.ObjectPrx
    {
        /**
         * Add a sequence of Ice identities to this set of constraints. Order is
         * not preserved and duplicates are implicitly removed.
         * @param additions The sequence of Ice identities to be added.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        add(additions:Ice.IdentitySeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Remove a sequence of identities from this set of constraints. No
         * errors are returned if an entry is not found.
         * @param deletions The sequence of Ice identities to be removed.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        remove(deletions:Ice.IdentitySeq, context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Returns a sequence of identities describing the constraints in this
         * set.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        get(context?:Map<string, string>):Ice.AsyncResult<Ice.IdentitySeq>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):IdentitySetPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<IdentitySetPrx>;
    }

    abstract class IdentitySet extends Ice.Object
    {
        /**
         * An object for managing the set of object identity constraints on a
         * {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see SessionControl
         */
        abstract add(additions:Ice.IdentitySeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * An object for managing the set of object identity constraints on a
         * {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see SessionControl
         */
        abstract remove(deletions:Ice.IdentitySeq, current:Ice.Current):PromiseLike<void>|void;
        /**
         * An object for managing the set of object identity constraints on a
         * {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         * @see SessionControl
         */
        abstract get(current:Ice.Current):PromiseLike<Ice.IdentitySeq>|Ice.IdentitySeq;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::IdentitySet".
         */
        static ice_staticId():string;
    }

    abstract class SessionControlPrx extends Ice.ObjectPrx
    {
        /**
         * Access the object that manages the allowable categories
         * for object identities for this session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        categories(context?:Map<string, string>):Ice.AsyncResult<StringSetPrx>;
        /**
         * Access the object that manages the allowable adapter identities
         * for objects for this session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        adapterIds(context?:Map<string, string>):Ice.AsyncResult<StringSetPrx>;
        /**
         * Access the object that manages the allowable object identities
         * for this session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        identities(context?:Map<string, string>):Ice.AsyncResult<IdentitySetPrx>;
        /**
         * Get the session timeout.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getSessionTimeout(context?:Map<string, string>):Ice.AsyncResult<number>;
        /**
         * Destroy the associated session.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        destroy(context?:Map<string, string>):Ice.AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):SessionControlPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<SessionControlPrx>;
    }

    abstract class SessionControl extends Ice.Object
    {
        /**
         * An administrative session control object, which is tied to the
         * lifecycle of a {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         */
        abstract categories(current:Ice.Current):PromiseLike<StringSetPrx>|StringSetPrx;
        /**
         * An administrative session control object, which is tied to the
         * lifecycle of a {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         */
        abstract adapterIds(current:Ice.Current):PromiseLike<StringSetPrx>|StringSetPrx;
        /**
         * An administrative session control object, which is tied to the
         * lifecycle of a {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         */
        abstract identities(current:Ice.Current):PromiseLike<IdentitySetPrx>|IdentitySetPrx;
        /**
         * An administrative session control object, which is tied to the
         * lifecycle of a {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         */
        abstract getSessionTimeout(current:Ice.Current):PromiseLike<number>|number;
        /**
         * An administrative session control object, which is tied to the
         * lifecycle of a {@link Session}.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Session
         */
        abstract destroy(current:Ice.Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::SessionControl".
         */
        static ice_staticId():string;
    }

    abstract class SessionManagerPrx extends Ice.ObjectPrx
    {
        /**
         * Create a new session.
         * @param userId The user id for the session.
         * @param control A proxy to the session control object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        create(userId:string, control:SessionControlPrx, context?:Map<string, string>):Ice.AsyncResult<SessionPrx>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):SessionManagerPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<SessionManagerPrx>;
    }

    abstract class SessionManager extends Ice.Object
    {
        /**
         * The session manager for username/password authenticated users that
         * is responsible for managing {@link Session} objects. New session objects
         * are created by the {@link Router} object calling on an application-provided
         * session manager. If no session manager is provided by the application,
         * no client-visible sessions are passed to the client.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Router
         * @see Session
         */
        abstract create(userId:string, control:SessionControlPrx, current:Ice.Current):PromiseLike<SessionPrx>|SessionPrx;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::SessionManager".
         */
        static ice_staticId():string;
    }

    abstract class SSLSessionManagerPrx extends Ice.ObjectPrx
    {
        /**
         * Create a new session.
         * @param info The SSL info.
         * @param control A proxy to the session control object.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        create(info:SSLInfo, control:SessionControlPrx, context?:Map<string, string>):Ice.AsyncResult<SessionPrx>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):SSLSessionManagerPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<SSLSessionManagerPrx>;
    }

    abstract class SSLSessionManager extends Ice.Object
    {
        /**
         * The session manager for SSL authenticated users that is
         * responsible for managing {@link Session} objects. New session objects are
         * created by the {@link Router} object calling on an application-provided
         * session manager. If no session manager is provided by the
         * application, no client-visible sessions are passed to the client.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         * @see Router
         * @see Session
         */
        abstract create(info:SSLInfo, control:SessionControlPrx, current:Ice.Current):PromiseLike<SessionPrx>|SessionPrx;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::SSLSessionManager".
         */
        static ice_staticId():string;
    }
}
