//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Process.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace Ice
{
    abstract class ProcessPrx extends ObjectPrx
    {
        /**
         * Initiate a graceful shut-down.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         * @see Communicator#shutdown
         */
        shutdown(context?:Map<string, string>):AsyncResult<void>;
        /**
         * Write a message on the process' stdout or stderr.
         * @param message The message.
         * @param fd 1 for stdout, 2 for stderr.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        writeMessage(message:string, fd:number, context?:Map<string, string>):AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:ObjectPrx, facet?:string):ProcessPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:ObjectPrx, facet?:string, contex?:Map<string, string>):AsyncResult<ProcessPrx>;
    }

    abstract class Process extends Object
    {
        /**
         * An administrative interface for process management. Managed servers must
         * implement this interface.
         *
         * <p class="Note">A servant implementing this interface is a potential target
         * for denial-of-service attacks, therefore proper security precautions
         * should be taken. For example, the servant can use a UUID to make its
         * identity harder to guess, and be registered in an object adapter with
         * a secured endpoint.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract shutdown(current:Current):PromiseLike<void>|void;
        /**
         * An administrative interface for process management. Managed servers must
         * implement this interface.
         *
         * <p class="Note">A servant implementing this interface is a potential target
         * for denial-of-service attacks, therefore proper security precautions
         * should be taken. For example, the servant can use a UUID to make its
         * identity harder to guess, and be registered in an object adapter with
         * a secured endpoint.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract writeMessage(message:string, fd:number, current:Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Ice::Process".
         */
        static ice_staticId():string;
    }
}
