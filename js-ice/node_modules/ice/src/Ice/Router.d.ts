//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace Ice
{
    abstract class RouterPrx extends ObjectPrx
    {
        /**
         * Get the router's client proxy, i.e., the proxy to use for
         * forwarding requests from the client to the router.
         *
         * If a null proxy is returned, the client will forward requests
         * to the router's endpoints.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getClientProxy(context?:Map<string, string>):AsyncResult<[Ice.ObjectPrx, boolean]>;
        /**
         * Get the router's server proxy, i.e., the proxy to use for
         * forwarding requests from the server to the router.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerProxy(context?:Map<string, string>):AsyncResult<Ice.ObjectPrx>;
        /**
         * Add new proxy information to the router's routing table.
         * @param proxies The proxies to add.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        addProxies(proxies:ObjectProxySeq, context?:Map<string, string>):AsyncResult<ObjectProxySeq>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:ObjectPrx, facet?:string):RouterPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:ObjectPrx, facet?:string, contex?:Map<string, string>):AsyncResult<RouterPrx>;
    }

    abstract class Router extends Object
    {
        /**
         * The Ice router interface. Routers can be set either globally with
         * {@link Communicator#setDefaultRouter}, or with <code>ice_router</code> on specific
         * proxies.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getClientProxy(current:Current):PromiseLike<[Ice.ObjectPrx, boolean]>|[Ice.ObjectPrx, boolean];
        /**
         * The Ice router interface. Routers can be set either globally with
         * {@link Communicator#setDefaultRouter}, or with <code>ice_router</code> on specific
         * proxies.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerProxy(current:Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The Ice router interface. Routers can be set either globally with
         * {@link Communicator#setDefaultRouter}, or with <code>ice_router</code> on specific
         * proxies.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract addProxies(proxies:ObjectProxySeq, current:Current):PromiseLike<ObjectProxySeq>|ObjectProxySeq;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Ice::Router".
         */
        static ice_staticId():string;
    }

    abstract class RouterFinderPrx extends ObjectPrx
    {
        /**
         * Get the router proxy implemented by the process hosting this
         * finder object. The proxy might point to several replicas.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getRouter(context?:Map<string, string>):AsyncResult<RouterPrx>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:ObjectPrx, facet?:string):RouterFinderPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:ObjectPrx, facet?:string, contex?:Map<string, string>):AsyncResult<RouterFinderPrx>;
    }

    abstract class RouterFinder extends Object
    {
        /**
         * This inferface should be implemented by services implementing the
         * Ice::Router interface. It should be advertised through an Ice
         * object with the identity `Ice/RouterFinder'. This allows clients to
         * retrieve the router proxy with just the endpoint information of the
         * service.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getRouter(current:Current):PromiseLike<RouterPrx>|RouterPrx;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Ice::RouterFinder".
         */
        static ice_staticId():string;
    }
}
