// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `ice-redis.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let DemoArea = _ModuleRegistry.module("DemoArea");

    Slice.defineSequence(DemoArea, "ByteSeqHelper", "Ice.ByteHelper", true);

    Slice.defineSequence(DemoArea, "LongSeqHelper", "Ice.LongHelper", true);

    let YCArea = _ModuleRegistry.module("YCArea");

    YCArea.DxPropertyYC = class
    {
        constructor(name = null, unit = null, k = 0.0, b = 0.0, precision = 0, fullvalue = 0.0, mindelta = 0.0, zerovalue = 0.0, flog = 0, fplan = 0, fcache = 0, fTrans = false, fMin = false, fMax = false, fAvrg = false, fRatio = false, fUpper = false, fLower = false, fUpper2 = false, fLower2 = false, fMinTime = false, fMaxTime = false, padding = 0, fMax2 = false, fMaxTime2 = false, yxno = 0, alevel = 0, uppervalue = 0.0, lowervalue = 0.0, uppervalue2 = 0.0, lowervalue2 = 0.0)
        {
            this.name = name;
            this.unit = unit;
            this.k = k;
            this.b = b;
            this.precision = precision;
            this.fullvalue = fullvalue;
            this.mindelta = mindelta;
            this.zerovalue = zerovalue;
            this.flog = flog;
            this.fplan = fplan;
            this.fcache = fcache;
            this.fTrans = fTrans;
            this.fMin = fMin;
            this.fMax = fMax;
            this.fAvrg = fAvrg;
            this.fRatio = fRatio;
            this.fUpper = fUpper;
            this.fLower = fLower;
            this.fUpper2 = fUpper2;
            this.fLower2 = fLower2;
            this.fMinTime = fMinTime;
            this.fMaxTime = fMaxTime;
            this.padding = padding;
            this.fMax2 = fMax2;
            this.fMaxTime2 = fMaxTime2;
            this.yxno = yxno;
            this.alevel = alevel;
            this.uppervalue = uppervalue;
            this.lowervalue = lowervalue;
            this.uppervalue2 = uppervalue2;
            this.lowervalue2 = lowervalue2;
        }

        _write(ostr)
        {
            DemoArea.ByteSeqHelper.write(ostr, this.name);
            DemoArea.ByteSeqHelper.write(ostr, this.unit);
            ostr.writeFloat(this.k);
            ostr.writeFloat(this.b);
            ostr.writeShort(this.precision);
            ostr.writeFloat(this.fullvalue);
            ostr.writeFloat(this.mindelta);
            ostr.writeFloat(this.zerovalue);
            ostr.writeShort(this.flog);
            ostr.writeShort(this.fplan);
            ostr.writeShort(this.fcache);
            ostr.writeBool(this.fTrans);
            ostr.writeBool(this.fMin);
            ostr.writeBool(this.fMax);
            ostr.writeBool(this.fAvrg);
            ostr.writeBool(this.fRatio);
            ostr.writeBool(this.fUpper);
            ostr.writeBool(this.fLower);
            ostr.writeBool(this.fUpper2);
            ostr.writeBool(this.fLower2);
            ostr.writeBool(this.fMinTime);
            ostr.writeBool(this.fMaxTime);
            ostr.writeShort(this.padding);
            ostr.writeBool(this.fMax2);
            ostr.writeBool(this.fMaxTime2);
            ostr.writeShort(this.yxno);
            ostr.writeShort(this.alevel);
            ostr.writeFloat(this.uppervalue);
            ostr.writeFloat(this.lowervalue);
            ostr.writeFloat(this.uppervalue2);
            ostr.writeFloat(this.lowervalue2);
        }

        _read(istr)
        {
            this.name = DemoArea.ByteSeqHelper.read(istr);
            this.unit = DemoArea.ByteSeqHelper.read(istr);
            this.k = istr.readFloat();
            this.b = istr.readFloat();
            this.precision = istr.readShort();
            this.fullvalue = istr.readFloat();
            this.mindelta = istr.readFloat();
            this.zerovalue = istr.readFloat();
            this.flog = istr.readShort();
            this.fplan = istr.readShort();
            this.fcache = istr.readShort();
            this.fTrans = istr.readBool();
            this.fMin = istr.readBool();
            this.fMax = istr.readBool();
            this.fAvrg = istr.readBool();
            this.fRatio = istr.readBool();
            this.fUpper = istr.readBool();
            this.fLower = istr.readBool();
            this.fUpper2 = istr.readBool();
            this.fLower2 = istr.readBool();
            this.fMinTime = istr.readBool();
            this.fMaxTime = istr.readBool();
            this.padding = istr.readShort();
            this.fMax2 = istr.readBool();
            this.fMaxTime2 = istr.readBool();
            this.yxno = istr.readShort();
            this.alevel = istr.readShort();
            this.uppervalue = istr.readFloat();
            this.lowervalue = istr.readFloat();
            this.uppervalue2 = istr.readFloat();
            this.lowervalue2 = istr.readFloat();
        }

        static get minWireSize()
        {
            return  65;
        }
    };

    Slice.defineStruct(YCArea.DxPropertyYC, false, true);

    YCArea.DxDTYC = class
    {
        constructor(status = 0, value = 0.0, timetag = 0)
        {
            this.status = status;
            this.value = value;
            this.timetag = timetag;
        }

        _write(ostr)
        {
            ostr.writeShort(this.status);
            ostr.writeFloat(this.value);
            ostr.writeInt(this.timetag);
        }

        _read(istr)
        {
            this.status = istr.readShort();
            this.value = istr.readFloat();
            this.timetag = istr.readInt();
        }

        static get minWireSize()
        {
            return  10;
        }
    };

    Slice.defineStruct(YCArea.DxDTYC, false, false);

    Slice.defineSequence(YCArea, "DxDTYCSeqHelper", "YCArea.DxDTYC", true);

    let YXArea = _ModuleRegistry.module("YXArea");

    YXArea.DxPropertyYX = class
    {
        constructor(name = null, fAlarm = false, fAlarmCount = false, unused = 0, reserved = 0, ykno = 0, alarmtype = 0, alevel = 0)
        {
            this.name = name;
            this.fAlarm = fAlarm;
            this.fAlarmCount = fAlarmCount;
            this.unused = unused;
            this.reserved = reserved;
            this.ykno = ykno;
            this.alarmtype = alarmtype;
            this.alevel = alevel;
        }

        _write(ostr)
        {
            DemoArea.ByteSeqHelper.write(ostr, this.name);
            ostr.writeBool(this.fAlarm);
            ostr.writeBool(this.fAlarmCount);
            ostr.writeByte(this.unused);
            ostr.writeInt(this.reserved);
            ostr.writeShort(this.ykno);
            ostr.writeShort(this.alarmtype);
            ostr.writeShort(this.alevel);
        }

        _read(istr)
        {
            this.name = DemoArea.ByteSeqHelper.read(istr);
            this.fAlarm = istr.readBool();
            this.fAlarmCount = istr.readBool();
            this.unused = istr.readByte();
            this.reserved = istr.readInt();
            this.ykno = istr.readShort();
            this.alarmtype = istr.readShort();
            this.alevel = istr.readShort();
        }

        static get minWireSize()
        {
            return  14;
        }
    };

    Slice.defineStruct(YXArea.DxPropertyYX, true, true);

    YXArea.DxDTYX = class
    {
        constructor(status = 0, value = 0, timetag = 0)
        {
            this.status = status;
            this.value = value;
            this.timetag = timetag;
        }

        _write(ostr)
        {
            ostr.writeShort(this.status);
            ostr.writeShort(this.value);
            ostr.writeInt(this.timetag);
        }

        _read(istr)
        {
            this.status = istr.readShort();
            this.value = istr.readShort();
            this.timetag = istr.readInt();
        }

        static get minWireSize()
        {
            return  8;
        }
    };

    Slice.defineStruct(YXArea.DxDTYX, true, false);

    Slice.defineSequence(YXArea, "DxDTYXSeqHelper", "YXArea.DxDTYX", true);

    let StationArea = _ModuleRegistry.module("StationArea");

    StationArea.DxPropertyStation = class
    {
        constructor(name = null, nYX = 0, nYC = 0, type = 0, protocol = null, addr1 = null, addr2 = null, port = 0, slaveAddr = 0, devName = null, baud = 0, dataBits = 0, stopBits = 0, parity = 0, timeout = 0, reserved = 0)
        {
            this.name = name;
            this.nYX = nYX;
            this.nYC = nYC;
            this.type = type;
            this.protocol = protocol;
            this.addr1 = addr1;
            this.addr2 = addr2;
            this.port = port;
            this.slaveAddr = slaveAddr;
            this.devName = devName;
            this.baud = baud;
            this.dataBits = dataBits;
            this.stopBits = stopBits;
            this.parity = parity;
            this.timeout = timeout;
            this.reserved = reserved;
        }

        _write(ostr)
        {
            DemoArea.ByteSeqHelper.write(ostr, this.name);
            ostr.writeInt(this.nYX);
            ostr.writeInt(this.nYC);
            ostr.writeShort(this.type);
            DemoArea.ByteSeqHelper.write(ostr, this.protocol);
            DemoArea.ByteSeqHelper.write(ostr, this.addr1);
            DemoArea.ByteSeqHelper.write(ostr, this.addr2);
            ostr.writeShort(this.port);
            ostr.writeInt(this.slaveAddr);
            DemoArea.ByteSeqHelper.write(ostr, this.devName);
            ostr.writeInt(this.baud);
            ostr.writeInt(this.dataBits);
            ostr.writeInt(this.stopBits);
            ostr.writeByte(this.parity);
            ostr.writeInt(this.timeout);
            ostr.writeInt(this.reserved);
        }

        _read(istr)
        {
            this.name = DemoArea.ByteSeqHelper.read(istr);
            this.nYX = istr.readInt();
            this.nYC = istr.readInt();
            this.type = istr.readShort();
            this.protocol = DemoArea.ByteSeqHelper.read(istr);
            this.addr1 = DemoArea.ByteSeqHelper.read(istr);
            this.addr2 = DemoArea.ByteSeqHelper.read(istr);
            this.port = istr.readShort();
            this.slaveAddr = istr.readInt();
            this.devName = DemoArea.ByteSeqHelper.read(istr);
            this.baud = istr.readInt();
            this.dataBits = istr.readInt();
            this.stopBits = istr.readInt();
            this.parity = istr.readByte();
            this.timeout = istr.readInt();
            this.reserved = istr.readInt();
        }

        static get minWireSize()
        {
            return  42;
        }
    };

    Slice.defineStruct(StationArea.DxPropertyStation, true, true);

    let SystemArea = _ModuleRegistry.module("SystemArea");

    SystemArea.DxPropertySystem = class
    {
        constructor(name = null, nstation = 0)
        {
            this.name = name;
            this.nstation = nstation;
        }

        _write(ostr)
        {
            DemoArea.ByteSeqHelper.write(ostr, this.name);
            ostr.writeShort(this.nstation);
        }

        _read(istr)
        {
            this.name = DemoArea.ByteSeqHelper.read(istr);
            this.nstation = istr.readShort();
        }

        static get minWireSize()
        {
            return  3;
        }
    };

    Slice.defineStruct(SystemArea.DxPropertySystem, true, true);

    let CommandArea = _ModuleRegistry.module("CommandArea");

    const iceC_CommandArea_DataCommand_ids = [
        "::CommandArea::DataCommand",
        "::Ice::Object"
    ];

    CommandArea.DataCommand = class extends Ice.Object
    {
    };

    CommandArea.DataCommandPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(CommandArea.DataCommand, CommandArea.DataCommandPrx, iceC_CommandArea_DataCommand_ids, 0,
    {
        "RPCGetYCProperty": [, , , , [3], [[3]], [[YCArea.DxPropertyYC]], , , ],
        "RPCSetYCProperty": [, , , , [3], [[YCArea.DxPropertyYC], [3]], , , , ],
        "RPCGetRealtimeYCData": [, , , , [3], [["DemoArea.LongSeqHelper"]], [["YCArea.DxDTYCSeqHelper"]], , , ],
        "RPCGetDayYCData": [, , , , [3], [[7], [4]], [["YCArea.DxDTYCSeqHelper"]], , , ],
        "RPCGetDayYCDatas": [, , , , [3], [[7], ["DemoArea.LongSeqHelper"]], [["DemoArea.LongSeqHelper"], ["YCArea.DxDTYCSeqHelper"]], , , ],
        "RPCGetProcessYCData": [, , , , [3], [[7], [4]], [[YCArea.DxDTYC], [YCArea.DxDTYC], [YCArea.DxDTYC]], , , ],
        "RPCGetProcessYCDatas": [, , , , [3], [[7], ["DemoArea.LongSeqHelper"]], [["YCArea.DxDTYCSeqHelper"], ["YCArea.DxDTYCSeqHelper"], ["YCArea.DxDTYCSeqHelper"]], , , ],
        "RPCGetPeriodYCData": [, , , , [3], [[7], [7], [4]], [["YCArea.DxDTYCSeqHelper"]], , , ],
        "RPCSaveYCData": [, , , , [3], [["DemoArea.LongSeqHelper"], ["YCArea.DxDTYCSeqHelper"]], , , , ],
        "RPCGetTimePointYCData": [, , , , [3], [[7], ["DemoArea.LongSeqHelper"]], [["YCArea.DxDTYCSeqHelper"]], , , ],
        "RPCSetRealtimeYCData": [, , , , [3], [["DemoArea.LongSeqHelper"], ["YCArea.DxDTYCSeqHelper"]], , , , ],
        "RPCGetYXProperty": [, , , , [3], [[3]], [[YXArea.DxPropertyYX]], , , ],
        "RPCSetYXProperty": [, , , , [3], [[YXArea.DxPropertyYX], [3]], , , , ],
        "RPCGetRealtimeYXData": [, , , , [3], [["DemoArea.LongSeqHelper"]], [["YXArea.DxDTYXSeqHelper"]], , , ],
        "RPCGetDayYXData": [, , , , [3], [[7], [4]], [["YXArea.DxDTYXSeqHelper"]], , , ],
        "RPCGetDayYXDatas": [, , , , [3], [[7], ["DemoArea.LongSeqHelper"]], [["DemoArea.LongSeqHelper"], ["YXArea.DxDTYXSeqHelper"]], , , ],
        "RPCGetPeriodYXData": [, , , , [3], [[7], [7], [4]], [["YXArea.DxDTYXSeqHelper"]], , , ],
        "RPCGetTimePointYXData": [, , , , [3], [[7], ["DemoArea.LongSeqHelper"]], [["YXArea.DxDTYXSeqHelper"]], , , ],
        "RPCSaveYXData": [, , , , [3], [["DemoArea.LongSeqHelper"], ["YXArea.DxDTYXSeqHelper"]], , , , ],
        "RPCGetStationProperty": [, , , , [3], , [[StationArea.DxPropertyStation]], , , ],
        "RPCSetStationProperty": [, , , , [3], [[StationArea.DxPropertyStation]], , , , ],
        "RPCGetSystemProperty": [, , , , [3], , [[SystemArea.DxPropertySystem]], , , ],
        "RPCSetSystemProperty": [, , , , [3], [[SystemArea.DxPropertySystem]], , , , ]
    });
    exports.DemoArea = DemoArea;
    exports.YCArea = YCArea;
    exports.YXArea = YXArea;
    exports.StationArea = StationArea;
    exports.SystemArea = SystemArea;
    exports.CommandArea = CommandArea;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
