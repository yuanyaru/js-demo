//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `PropertiesAdmin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace Ice
{
    /**
     * A simple collection of properties, represented as a dictionary of
     * key/value pairs. Both key and value are strings.
     * @see Properties#getPropertiesForPrefix
     */
    class PropertyDict extends Map<string, string>
    {
    }

    class PropertyDictHelper
    {
        static write(outs:OutputStream, value:PropertyDict):void;
        static read(ins:InputStream):PropertyDict;
    }

    abstract class PropertiesAdminPrx extends ObjectPrx
    {
        /**
         * Get a property by key. If the property is not set, an empty
         * string is returned.
         * @param key The property key.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getProperty(key:string, context?:Map<string, string>):AsyncResult<string>;
        /**
         * Get all properties whose keys begin with <em>prefix</em>. If
         * <em>prefix</em> is an empty string then all properties are returned.
         * @param prefix The prefix to search for (empty string if none).
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getPropertiesForPrefix(prefix:string, context?:Map<string, string>):AsyncResult<PropertyDict>;
        /**
         * Update the communicator's properties with the given property set.
         * @param newProperties Properties to be added, changed, or removed.
         * If an entry in <em>newProperties</em> matches the name of an existing property,
         * that property's value is replaced with the new value. If the new value
         * is an empty string, the property is removed. Any existing properties
         * that are not modified or removed by the entries in newProperties are
         * retained with their original values.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        setProperties(newProperties:PropertyDict, context?:Map<string, string>):AsyncResult<void>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:ObjectPrx, facet?:string):PropertiesAdminPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:ObjectPrx, facet?:string, contex?:Map<string, string>):AsyncResult<PropertiesAdminPrx>;
    }

    abstract class PropertiesAdmin extends Object
    {
        /**
         * The PropertiesAdmin interface provides remote access to the properties
         * of a communicator.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getProperty(key:string, current:Current):PromiseLike<string>|string;
        /**
         * The PropertiesAdmin interface provides remote access to the properties
         * of a communicator.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getPropertiesForPrefix(prefix:string, current:Current):PromiseLike<PropertyDict>|PropertyDict;
        /**
         * The PropertiesAdmin interface provides remote access to the properties
         * of a communicator.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract setProperties(newProperties:PropertyDict, current:Current):PromiseLike<void>|void;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Ice::PropertiesAdmin".
         */
        static ice_staticId():string;
    }
}
