//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


export namespace Glacier2
{
    /**
     * This exception is raised if a client tries to destroy a session
     * with a router, but no session exists for the client.
     * @see Router#destroySession
     */
    class SessionNotExistException extends Ice.UserException
    {
    }

    abstract class RouterPrx extends Ice.ObjectPrx
    {
        /**
         * Get the router's client proxy, i.e., the proxy to use for
         * forwarding requests from the client to the router.
         *
         * If a null proxy is returned, the client will forward requests
         * to the router's endpoints.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getClientProxy(context?:Map<string, string>):Ice.AsyncResult<[Ice.ObjectPrx, boolean]>;
        /**
         * Get the router's server proxy, i.e., the proxy to use for
         * forwarding requests from the server to the router.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getServerProxy(context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectPrx>;
        /**
         * Add new proxy information to the router's routing table.
         * @param proxies The proxies to add.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        addProxies(proxies:Ice.ObjectProxySeq, context?:Map<string, string>):Ice.AsyncResult<Ice.ObjectProxySeq>;
        /**
         * This category must be used in the identities of all of the client's
         * callback objects. This is necessary in order for the router to
         * forward callback requests to the intended client. If the Glacier2
         * server endpoints are not set, the returned category is an empty
         * string.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getCategoryForClient(context?:Map<string, string>):Ice.AsyncResult<string>;
        /**
         * Create a per-client session with the router. If a
         * {@link SessionManager} has been installed, a proxy to a {@link Session}
         * object is returned to the client. Otherwise, null is returned
         * and only an internal session (i.e., not visible to the client)
         * is created.
         *
         * If a session proxy is returned, it must be configured to route
         * through the router that created it. This will happen automatically
         * if the router is configured as the client's default router at the
         * time the session proxy is created in the client process, otherwise
         * the client must configure the session proxy explicitly.
         * @param userId The user id for which to check the password.
         * @param password The password for the given user id.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         * @see Session
         * @see SessionManager
         * @see PermissionsVerifier
         */
        createSession(userId:string, password:string, context?:Map<string, string>):Ice.AsyncResult<SessionPrx>;
        /**
         * Create a per-client session with the router. The user is
         * authenticated through the SSL certificates that have been
         * associated with the connection. If a {@link SessionManager} has been
         * installed, a proxy to a {@link Session} object is returned to the
         * client. Otherwise, null is returned and only an internal
         * session (i.e., not visible to the client) is created.
         *
         * If a session proxy is returned, it must be configured to route
         * through the router that created it. This will happen automatically
         * if the router is configured as the client's default router at the
         * time the session proxy is created in the client process, otherwise
         * the client must configure the session proxy explicitly.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         * @see Session
         * @see SessionManager
         * @see PermissionsVerifier
         */
        createSessionFromSecureConnection(context?:Map<string, string>):Ice.AsyncResult<SessionPrx>;
        /**
         * Keep the calling client's session with this router alive.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        refreshSession(context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Destroy the calling client's session with this router.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        destroySession(context?:Map<string, string>):Ice.AsyncResult<void>;
        /**
         * Get the value of the session timeout. Sessions are destroyed
         * if they see no activity for this period of time.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getSessionTimeout(context?:Map<string, string>):Ice.AsyncResult<Ice.Long>;
        /**
         * Get the value of the ACM timeout. Clients supporting connection
         * heartbeats can enable them instead of explicitly sending keep
         * alives requests.
         *
         * NOTE: This method is only available since Ice 3.6.
         * @param context The Context map to send with the invocation.
         * @return The asynchronous result object for the invocation.
         */
        getACMTimeout(context?:Map<string, string>):Ice.AsyncResult<number>;

        /**
         * Downcasts a proxy without confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @return A proxy with the requested type.
         */
        static uncheckedCast(prx:Ice.ObjectPrx, facet?:string):RouterPrx;
        /**
         * Downcasts a proxy after confirming the target object's type via a remote invocation.
         * @param prx The target proxy.
         * @param facet A facet name.
         * @param context The context map for the invocation.
         * @return A proxy with the requested type and facet, or nil if the target proxy is nil or the target
         * object does not support the requested type.
         */
        static checkedCast(prx:Ice.ObjectPrx, facet?:string, contex?:Map<string, string>):Ice.AsyncResult<RouterPrx>;
    }

    abstract class Router extends Ice.Object
    {
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getClientProxy(current:Ice.Current):PromiseLike<[Ice.ObjectPrx, boolean]>|[Ice.ObjectPrx, boolean];
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getServerProxy(current:Ice.Current):PromiseLike<Ice.ObjectPrx>|Ice.ObjectPrx;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract addProxies(proxies:Ice.ObjectProxySeq, current:Ice.Current):PromiseLike<Ice.ObjectProxySeq>|Ice.ObjectProxySeq;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getCategoryForClient(current:Ice.Current):PromiseLike<string>|string;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract createSession(userId:string, password:string, current:Ice.Current):PromiseLike<SessionPrx>|SessionPrx;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract createSessionFromSecureConnection(current:Ice.Current):PromiseLike<SessionPrx>|SessionPrx;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract refreshSession(current:Ice.Current):PromiseLike<void>|void;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract destroySession(current:Ice.Current):PromiseLike<void>|void;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getSessionTimeout(current:Ice.Current):PromiseLike<Ice.Long>|Ice.Long;
        /**
         * The Glacier2 specialization of the <code>Ice::Router</code> interface.
         * @param current The Current object for the invocation.
         * @return The result or a promise like object that will be resolved with the result of the invocation.
         */
        abstract getACMTimeout(current:Ice.Current):PromiseLike<number>|number;
        /**
         * Obtains the Slice type ID of this type.
         * @return The return value is always "::Glacier2::Router".
         */
        static ice_staticId():string;
    }
}
