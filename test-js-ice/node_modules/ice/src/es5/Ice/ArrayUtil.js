"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/ModuleRegistry").Ice;

var _ModuleRegistry = Ice._ModuleRegistry;
var Slice = Ice.Slice;

var eq = function eq(e1, e2) {
  if (e1 === e2) {
    return true; // If identity compare equals members are equal.
  } else if (e1 === null || e1 === undefined || e2 === null || e2 === undefined) {
    return false;
  } else if (e1.prototype !== e2.prototype) {
    return false;
  } else if (typeof e1.equals == "function") {
    return e1.equals(e2);
  } else if (e1 instanceof Array || e1 instanceof Uint8Array) {
    return ArrayUtil.equals(e1, e2, eq);
  }

  return false;
};

var ArrayUtil =
/*#__PURE__*/
function () {
  function ArrayUtil() {
    _classCallCheck(this, ArrayUtil);
  }

  _createClass(ArrayUtil, null, [{
    key: "clone",
    value: function clone(arr) {
      if (arr === undefined) {
        return arr;
      } else if (arr === null) {
        return [];
      } else {
        return arr.slice();
      }
    }
  }, {
    key: "equals",
    value: function equals(v1, v2, valuesEqual) {
      if (v1.length != v2.length) {
        return false;
      }

      var equalFn = valuesEqual || eq;

      for (var i = 0; i < v1.length; ++i) {
        if (!equalFn.call(equalFn, v1[i], v2[i])) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "shuffle",
    value: function shuffle(arr) {
      for (var i = arr.length; i > 1; --i) {
        var e = arr[i - 1];
        var rand = Math.floor(Math.random() * i);
        arr[i - 1] = arr[rand];
        arr[rand] = e;
      }
    }
  }]);

  return ArrayUtil;
}();

ArrayUtil.eq = eq;

Slice.defineSequence = function (module, name, valueHelper, fixed, elementType) {
  var helper = null;
  Object.defineProperty(module, name, {
    get: function get() {
      if (helper === null) {
        helper = Ice.StreamHelpers.generateSeqHelper(_ModuleRegistry.type(valueHelper), fixed, _ModuleRegistry.type(elementType));
      }

      return helper;
    }
  });
};

Ice.ArrayUtil = ArrayUtil;
module.exports.Ice = Ice;