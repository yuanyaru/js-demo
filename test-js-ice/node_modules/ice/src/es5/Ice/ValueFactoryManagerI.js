"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
var Ice = require("../Ice/LocalException").Ice;

var AlreadyRegisteredException = Ice.AlreadyRegisteredException; //
// Only for use by Instance
//

var ValueFactoryManagerI =
/*#__PURE__*/
function () {
  function ValueFactoryManagerI() {
    _classCallCheck(this, ValueFactoryManagerI);

    this._factoryMap = new Map(); // Map<String, ValueFactory>
  }

  _createClass(ValueFactoryManagerI, [{
    key: "add",
    value: function add(factory, id) {
      if (this._factoryMap.has(id)) {
        throw new AlreadyRegisteredException("value factory", id);
      }

      this._factoryMap.set(id, factory);
    }
  }, {
    key: "find",
    value: function find(id) {
      return this._factoryMap.get(id);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._factoryMap = new Map(); // Map<String, ValueFactory>
    }
  }]);

  return ValueFactoryManagerI;
}();

Ice.ValueFactoryManagerI = ValueFactoryManagerI;
module.exports.Ice = Ice;