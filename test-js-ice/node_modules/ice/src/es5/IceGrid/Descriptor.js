"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Descriptor.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */

/* jshint ignore: start */

/* slice2js browser-bundle-skip */
(function (module, require, exports) {
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
  var _ModuleRegistry = require("../Ice/ModuleRegistry").Ice._ModuleRegistry;

  var Ice = _ModuleRegistry.require(module, ["../Ice/Object", "../Ice/Value", "../Ice/ObjectPrx", "../Ice/Struct", "../Ice/Long", "../Ice/HashMap", "../Ice/HashUtil", "../Ice/ArrayUtil", "../Ice/StreamHelpers", "../Ice/Identity", "../Ice/BuiltinSequences"]).Ice;

  var Slice = Ice.Slice;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */

  var IceGrid = _ModuleRegistry.module("IceGrid");
  /* slice2js browser-bundle-skip-end */


  Slice.defineDictionary(IceGrid, "StringStringDict", "StringStringDictHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);
  /**
   * Property descriptor.
   *
   **/

  IceGrid.PropertyDescriptor =
  /*#__PURE__*/
  function () {
    function _class() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

      _classCallCheck(this, _class);

      this.name = name;
      this.value = value;
    }

    _createClass(_class, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.name);
        ostr.writeString(this.value);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.name = istr.readString();
        this.value = istr.readString();
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 2;
      }
    }]);

    return _class;
  }();

  Slice.defineStruct(IceGrid.PropertyDescriptor, true, true);
  Slice.defineSequence(IceGrid, "PropertyDescriptorSeqHelper", "IceGrid.PropertyDescriptor", false);
  /**
   * A property set descriptor.
   *
   **/

  IceGrid.PropertySetDescriptor =
  /*#__PURE__*/
  function () {
    function _class2() {
      var references = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, _class2);

      this.references = references;
      this.properties = properties;
    }

    _createClass(_class2, [{
      key: "_write",
      value: function _write(ostr) {
        Ice.StringSeqHelper.write(ostr, this.references);
        IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.references = Ice.StringSeqHelper.read(istr);
        this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 2;
      }
    }]);

    return _class2;
  }();

  Slice.defineStruct(IceGrid.PropertySetDescriptor, true, true);
  Slice.defineDictionary(IceGrid, "PropertySetDescriptorDict", "PropertySetDescriptorDictHelper", "Ice.StringHelper", "IceGrid.PropertySetDescriptor", false, undefined, undefined);
  /**
   * An Ice object descriptor.
   *
   **/

  IceGrid.ObjectDescriptor =
  /*#__PURE__*/
  function () {
    function _class3() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Ice.Identity();
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

      _classCallCheck(this, _class3);

      this.id = id;
      this.type = type;
      this.proxyOptions = proxyOptions;
    }

    _createClass(_class3, [{
      key: "_write",
      value: function _write(ostr) {
        Ice.Identity.write(ostr, this.id);
        ostr.writeString(this.type);
        ostr.writeString(this.proxyOptions);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.id = Ice.Identity.read(istr, this.id);
        this.type = istr.readString();
        this.proxyOptions = istr.readString();
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 4;
      }
    }]);

    return _class3;
  }();

  Slice.defineStruct(IceGrid.ObjectDescriptor, true, true);
  Slice.defineSequence(IceGrid, "ObjectDescriptorSeqHelper", "IceGrid.ObjectDescriptor", false);
  /**
   * An Ice object adapter descriptor.
   *
   **/

  IceGrid.AdapterDescriptor =
  /*#__PURE__*/
  function () {
    function _class4() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var replicaGroupId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      var priority = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      var registerProcess = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var serverLifetime = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
      var objects = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
      var allocatables = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

      _classCallCheck(this, _class4);

      this.name = name;
      this.description = description;
      this.id = id;
      this.replicaGroupId = replicaGroupId;
      this.priority = priority;
      this.registerProcess = registerProcess;
      this.serverLifetime = serverLifetime;
      this.objects = objects;
      this.allocatables = allocatables;
    }

    _createClass(_class4, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.name);
        ostr.writeString(this.description);
        ostr.writeString(this.id);
        ostr.writeString(this.replicaGroupId);
        ostr.writeString(this.priority);
        ostr.writeBool(this.registerProcess);
        ostr.writeBool(this.serverLifetime);
        IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
        IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.allocatables);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.name = istr.readString();
        this.description = istr.readString();
        this.id = istr.readString();
        this.replicaGroupId = istr.readString();
        this.priority = istr.readString();
        this.registerProcess = istr.readBool();
        this.serverLifetime = istr.readBool();
        this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
        this.allocatables = IceGrid.ObjectDescriptorSeqHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 9;
      }
    }]);

    return _class4;
  }();

  Slice.defineStruct(IceGrid.AdapterDescriptor, true, true);
  Slice.defineSequence(IceGrid, "AdapterDescriptorSeqHelper", "IceGrid.AdapterDescriptor", false);
  /**
   * A Freeze database environment descriptor.
   *
   **/

  IceGrid.DbEnvDescriptor =
  /*#__PURE__*/
  function () {
    function _class5() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var dbHome = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var properties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, _class5);

      this.name = name;
      this.description = description;
      this.dbHome = dbHome;
      this.properties = properties;
    }

    _createClass(_class5, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.name);
        ostr.writeString(this.description);
        ostr.writeString(this.dbHome);
        IceGrid.PropertyDescriptorSeqHelper.write(ostr, this.properties);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.name = istr.readString();
        this.description = istr.readString();
        this.dbHome = istr.readString();
        this.properties = IceGrid.PropertyDescriptorSeqHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 4;
      }
    }]);

    return _class5;
  }();

  Slice.defineStruct(IceGrid.DbEnvDescriptor, true, true);
  Slice.defineSequence(IceGrid, "DbEnvDescriptorSeqHelper", "IceGrid.DbEnvDescriptor", false);
  var iceC_IceGrid_CommunicatorDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor"];
  /**
   * A communicator descriptor.
   *
   **/

  IceGrid.CommunicatorDescriptor =
  /*#__PURE__*/
  function (_Ice$Value) {
    _inherits(_class6, _Ice$Value);

    function _class6() {
      var _this;

      var adapters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var propertySet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new IceGrid.PropertySetDescriptor();
      var dbEnvs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var logs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";

      _classCallCheck(this, _class6);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(_class6).call(this));
      _this.adapters = adapters;
      _this.propertySet = propertySet;
      _this.dbEnvs = dbEnvs;
      _this.logs = logs;
      _this.description = description;
      return _this;
    }

    _createClass(_class6, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        IceGrid.AdapterDescriptorSeqHelper.write(ostr, this.adapters);
        IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
        IceGrid.DbEnvDescriptorSeqHelper.write(ostr, this.dbEnvs);
        Ice.StringSeqHelper.write(ostr, this.logs);
        ostr.writeString(this.description);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.adapters = IceGrid.AdapterDescriptorSeqHelper.read(istr);
        this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
        this.dbEnvs = IceGrid.DbEnvDescriptorSeqHelper.read(istr);
        this.logs = Ice.StringSeqHelper.read(istr);
        this.description = istr.readString();
      }
    }]);

    return _class6;
  }(Ice.Value);

  Slice.defineValue(IceGrid.CommunicatorDescriptor, iceC_IceGrid_CommunicatorDescriptor_ids[1], false);
  /**
   * A distribution descriptor defines an IcePatch2 server and the
   * directories to retrieve from the patch server.
   *
   **/

  IceGrid.DistributionDescriptor =
  /*#__PURE__*/
  function () {
    function _class7() {
      var icepatch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var directories = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      _classCallCheck(this, _class7);

      this.icepatch = icepatch;
      this.directories = directories;
    }

    _createClass(_class7, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.icepatch);
        Ice.StringSeqHelper.write(ostr, this.directories);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.icepatch = istr.readString();
        this.directories = Ice.StringSeqHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 2;
      }
    }]);

    return _class7;
  }();

  Slice.defineStruct(IceGrid.DistributionDescriptor, true, true);
  var iceC_IceGrid_ServerDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServerDescriptor"];
  /**
   * An Ice server descriptor.
   *
   **/

  IceGrid.ServerDescriptor =
  /*#__PURE__*/
  function (_IceGrid$Communicator) {
    _inherits(_class8, _IceGrid$Communicator);

    function _class8(adapters, propertySet, dbEnvs, logs, description) {
      var _this2;

      var id = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
      var exe = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
      var iceVersion = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
      var pwd = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : "";
      var options = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
      var envs = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
      var activation = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : "";
      var activationTimeout = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : "";
      var deactivationTimeout = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : "";
      var applicationDistrib = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : false;
      var distrib = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : new IceGrid.DistributionDescriptor();
      var allocatable = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : false;
      var user = arguments.length > 17 && arguments[17] !== undefined ? arguments[17] : "";

      _classCallCheck(this, _class8);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(_class8).call(this, adapters, propertySet, dbEnvs, logs, description));
      _this2.id = id;
      _this2.exe = exe;
      _this2.iceVersion = iceVersion;
      _this2.pwd = pwd;
      _this2.options = options;
      _this2.envs = envs;
      _this2.activation = activation;
      _this2.activationTimeout = activationTimeout;
      _this2.deactivationTimeout = deactivationTimeout;
      _this2.applicationDistrib = applicationDistrib;
      _this2.distrib = distrib;
      _this2.allocatable = allocatable;
      _this2.user = user;
      return _this2;
    }

    _createClass(_class8, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeString(this.id);
        ostr.writeString(this.exe);
        ostr.writeString(this.iceVersion);
        ostr.writeString(this.pwd);
        Ice.StringSeqHelper.write(ostr, this.options);
        Ice.StringSeqHelper.write(ostr, this.envs);
        ostr.writeString(this.activation);
        ostr.writeString(this.activationTimeout);
        ostr.writeString(this.deactivationTimeout);
        ostr.writeBool(this.applicationDistrib);
        IceGrid.DistributionDescriptor.write(ostr, this.distrib);
        ostr.writeBool(this.allocatable);
        ostr.writeString(this.user);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.id = istr.readString();
        this.exe = istr.readString();
        this.iceVersion = istr.readString();
        this.pwd = istr.readString();
        this.options = Ice.StringSeqHelper.read(istr);
        this.envs = Ice.StringSeqHelper.read(istr);
        this.activation = istr.readString();
        this.activationTimeout = istr.readString();
        this.deactivationTimeout = istr.readString();
        this.applicationDistrib = istr.readBool();
        this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
        this.allocatable = istr.readBool();
        this.user = istr.readString();
      }
    }]);

    return _class8;
  }(IceGrid.CommunicatorDescriptor);

  Slice.defineValue(IceGrid.ServerDescriptor, iceC_IceGrid_ServerDescriptor_ids[2], false);
  Slice.defineSequence(IceGrid, "ServerDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServerDescriptor");
  var iceC_IceGrid_ServiceDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::ServiceDescriptor"];
  /**
   * An IceBox service descriptor.
   *
   **/

  IceGrid.ServiceDescriptor =
  /*#__PURE__*/
  function (_IceGrid$Communicator2) {
    _inherits(_class9, _IceGrid$Communicator2);

    function _class9(adapters, propertySet, dbEnvs, logs, description) {
      var _this3;

      var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
      var entry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";

      _classCallCheck(this, _class9);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(_class9).call(this, adapters, propertySet, dbEnvs, logs, description));
      _this3.name = name;
      _this3.entry = entry;
      return _this3;
    }

    _createClass(_class9, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeString(this.name);
        ostr.writeString(this.entry);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.name = istr.readString();
        this.entry = istr.readString();
      }
    }]);

    return _class9;
  }(IceGrid.CommunicatorDescriptor);

  Slice.defineValue(IceGrid.ServiceDescriptor, iceC_IceGrid_ServiceDescriptor_ids[2], false);
  Slice.defineSequence(IceGrid, "ServiceDescriptorSeqHelper", "Ice.ObjectHelper", false, "IceGrid.ServiceDescriptor");
  /**
   * A server template instance descriptor.
   *
   **/

  IceGrid.ServerInstanceDescriptor =
  /*#__PURE__*/
  function () {
    function _class10() {
      var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var propertySet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new IceGrid.PropertySetDescriptor();
      var servicePropertySets = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

      _classCallCheck(this, _class10);

      this.template = template;
      this.parameterValues = parameterValues;
      this.propertySet = propertySet;
      this.servicePropertySets = servicePropertySets;
    }

    _createClass(_class10, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.template);
        IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
        IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.servicePropertySets);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.template = istr.readString();
        this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
        this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
        this.servicePropertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 5;
      }
    }]);

    return _class10;
  }();

  Slice.defineStruct(IceGrid.ServerInstanceDescriptor, false, true);
  Slice.defineSequence(IceGrid, "ServerInstanceDescriptorSeqHelper", "IceGrid.ServerInstanceDescriptor", false);
  /**
   * A template descriptor for server or service templates.
   *
   **/

  IceGrid.TemplateDescriptor =
  /*#__PURE__*/
  function () {
    function _class11() {
      var descriptor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var parameterDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      _classCallCheck(this, _class11);

      this.descriptor = descriptor;
      this.parameters = parameters;
      this.parameterDefaults = parameterDefaults;
    }

    _createClass(_class11, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeValue(this.descriptor);
        Ice.StringSeqHelper.write(ostr, this.parameters);
        IceGrid.StringStringDictHelper.write(ostr, this.parameterDefaults);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        var _this4 = this;

        istr.readValue(function (obj) {
          return _this4.descriptor = obj;
        }, IceGrid.CommunicatorDescriptor);
        this.parameters = Ice.StringSeqHelper.read(istr);
        this.parameterDefaults = IceGrid.StringStringDictHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 3;
      }
    }]);

    return _class11;
  }();

  Slice.defineStruct(IceGrid.TemplateDescriptor, false, true);
  Slice.defineDictionary(IceGrid, "TemplateDescriptorDict", "TemplateDescriptorDictHelper", "Ice.StringHelper", "IceGrid.TemplateDescriptor", false, undefined, undefined);
  /**
   * A service template instance descriptor.
   *
   **/

  IceGrid.ServiceInstanceDescriptor =
  /*#__PURE__*/
  function () {
    function _class12() {
      var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var parameterValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var descriptor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var propertySet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new IceGrid.PropertySetDescriptor();

      _classCallCheck(this, _class12);

      this.template = template;
      this.parameterValues = parameterValues;
      this.descriptor = descriptor;
      this.propertySet = propertySet;
    }

    _createClass(_class12, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.template);
        IceGrid.StringStringDictHelper.write(ostr, this.parameterValues);
        ostr.writeValue(this.descriptor);
        IceGrid.PropertySetDescriptor.write(ostr, this.propertySet);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        var _this5 = this;

        this.template = istr.readString();
        this.parameterValues = IceGrid.StringStringDictHelper.read(istr);
        istr.readValue(function (obj) {
          return _this5.descriptor = obj;
        }, IceGrid.ServiceDescriptor);
        this.propertySet = IceGrid.PropertySetDescriptor.read(istr, this.propertySet);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 5;
      }
    }]);

    return _class12;
  }();

  Slice.defineStruct(IceGrid.ServiceInstanceDescriptor, false, true);
  Slice.defineSequence(IceGrid, "ServiceInstanceDescriptorSeqHelper", "IceGrid.ServiceInstanceDescriptor", false);
  var iceC_IceGrid_IceBoxDescriptor_ids = ["::Ice::Object", "::IceGrid::CommunicatorDescriptor", "::IceGrid::IceBoxDescriptor", "::IceGrid::ServerDescriptor"];
  /**
   * An IceBox server descriptor.
   *
   **/

  IceGrid.IceBoxDescriptor =
  /*#__PURE__*/
  function (_IceGrid$ServerDescri) {
    _inherits(_class13, _IceGrid$ServerDescri);

    function _class13(adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user) {
      var _this6;

      var services = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : null;

      _classCallCheck(this, _class13);

      _this6 = _possibleConstructorReturn(this, _getPrototypeOf(_class13).call(this, adapters, propertySet, dbEnvs, logs, description, id, exe, iceVersion, pwd, options, envs, activation, activationTimeout, deactivationTimeout, applicationDistrib, distrib, allocatable, user));
      _this6.services = services;
      return _this6;
    }

    _createClass(_class13, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        IceGrid.ServiceInstanceDescriptorSeqHelper.write(ostr, this.services);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.services = IceGrid.ServiceInstanceDescriptorSeqHelper.read(istr);
      }
    }]);

    return _class13;
  }(IceGrid.ServerDescriptor);

  Slice.defineValue(IceGrid.IceBoxDescriptor, iceC_IceGrid_IceBoxDescriptor_ids[2], false);
  /**
   * A node descriptor.
   *
   **/

  IceGrid.NodeDescriptor =
  /*#__PURE__*/
  function () {
    function _class14() {
      var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var serverInstances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var servers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var loadFactor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

      _classCallCheck(this, _class14);

      this.variables = variables;
      this.serverInstances = serverInstances;
      this.servers = servers;
      this.loadFactor = loadFactor;
      this.description = description;
      this.propertySets = propertySets;
    }

    _createClass(_class14, [{
      key: "_write",
      value: function _write(ostr) {
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
        IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
        ostr.writeString(this.loadFactor);
        ostr.writeString(this.description);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
        this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
        this.loadFactor = istr.readString();
        this.description = istr.readString();
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 6;
      }
    }]);

    return _class14;
  }();

  Slice.defineStruct(IceGrid.NodeDescriptor, false, true);
  Slice.defineDictionary(IceGrid, "NodeDescriptorDict", "NodeDescriptorDictHelper", "Ice.StringHelper", "IceGrid.NodeDescriptor", false, undefined, undefined);
  var iceC_IceGrid_LoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy"];
  /**
   * A base class for load balancing policies.
   *
   **/

  IceGrid.LoadBalancingPolicy =
  /*#__PURE__*/
  function (_Ice$Value2) {
    _inherits(_class15, _Ice$Value2);

    function _class15() {
      var _this7;

      var nReplicas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

      _classCallCheck(this, _class15);

      _this7 = _possibleConstructorReturn(this, _getPrototypeOf(_class15).call(this));
      _this7.nReplicas = nReplicas;
      return _this7;
    }

    _createClass(_class15, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeString(this.nReplicas);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.nReplicas = istr.readString();
      }
    }]);

    return _class15;
  }(Ice.Value);

  Slice.defineValue(IceGrid.LoadBalancingPolicy, iceC_IceGrid_LoadBalancingPolicy_ids[1], false);
  var iceC_IceGrid_RandomLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RandomLoadBalancingPolicy"];
  /**
   * Random load balancing policy.
   *
   **/

  IceGrid.RandomLoadBalancingPolicy =
  /*#__PURE__*/
  function (_IceGrid$LoadBalancin) {
    _inherits(_class16, _IceGrid$LoadBalancin);

    function _class16(nReplicas) {
      _classCallCheck(this, _class16);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class16).call(this, nReplicas));
    }

    return _class16;
  }(IceGrid.LoadBalancingPolicy);

  Slice.defineValue(IceGrid.RandomLoadBalancingPolicy, iceC_IceGrid_RandomLoadBalancingPolicy_ids[2], false);
  var iceC_IceGrid_OrderedLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::OrderedLoadBalancingPolicy"];
  /**
   * Ordered load balancing policy.
   *
   **/

  IceGrid.OrderedLoadBalancingPolicy =
  /*#__PURE__*/
  function (_IceGrid$LoadBalancin2) {
    _inherits(_class17, _IceGrid$LoadBalancin2);

    function _class17(nReplicas) {
      _classCallCheck(this, _class17);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class17).call(this, nReplicas));
    }

    return _class17;
  }(IceGrid.LoadBalancingPolicy);

  Slice.defineValue(IceGrid.OrderedLoadBalancingPolicy, iceC_IceGrid_OrderedLoadBalancingPolicy_ids[2], false);
  var iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::LoadBalancingPolicy", "::IceGrid::RoundRobinLoadBalancingPolicy"];
  /**
   * Round robin load balancing policy.
   *
   **/

  IceGrid.RoundRobinLoadBalancingPolicy =
  /*#__PURE__*/
  function (_IceGrid$LoadBalancin3) {
    _inherits(_class18, _IceGrid$LoadBalancin3);

    function _class18(nReplicas) {
      _classCallCheck(this, _class18);

      return _possibleConstructorReturn(this, _getPrototypeOf(_class18).call(this, nReplicas));
    }

    return _class18;
  }(IceGrid.LoadBalancingPolicy);

  Slice.defineValue(IceGrid.RoundRobinLoadBalancingPolicy, iceC_IceGrid_RoundRobinLoadBalancingPolicy_ids[2], false);
  var iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids = ["::Ice::Object", "::IceGrid::AdaptiveLoadBalancingPolicy", "::IceGrid::LoadBalancingPolicy"];
  /**
   * Adaptive load balancing policy.
   *
   **/

  IceGrid.AdaptiveLoadBalancingPolicy =
  /*#__PURE__*/
  function (_IceGrid$LoadBalancin4) {
    _inherits(_class19, _IceGrid$LoadBalancin4);

    function _class19(nReplicas) {
      var _this8;

      var loadSample = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

      _classCallCheck(this, _class19);

      _this8 = _possibleConstructorReturn(this, _getPrototypeOf(_class19).call(this, nReplicas));
      _this8.loadSample = loadSample;
      return _this8;
    }

    _createClass(_class19, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeString(this.loadSample);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.loadSample = istr.readString();
      }
    }]);

    return _class19;
  }(IceGrid.LoadBalancingPolicy);

  Slice.defineValue(IceGrid.AdaptiveLoadBalancingPolicy, iceC_IceGrid_AdaptiveLoadBalancingPolicy_ids[1], false);
  /**
   * A replica group descriptor.
   *
   **/

  IceGrid.ReplicaGroupDescriptor =
  /*#__PURE__*/
  function () {
    function _class20() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var loadBalancing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var proxyOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
      var objects = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var description = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
      var filter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";

      _classCallCheck(this, _class20);

      this.id = id;
      this.loadBalancing = loadBalancing;
      this.proxyOptions = proxyOptions;
      this.objects = objects;
      this.description = description;
      this.filter = filter;
    }

    _createClass(_class20, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.id);
        ostr.writeValue(this.loadBalancing);
        ostr.writeString(this.proxyOptions);
        IceGrid.ObjectDescriptorSeqHelper.write(ostr, this.objects);
        ostr.writeString(this.description);
        ostr.writeString(this.filter);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        var _this9 = this;

        this.id = istr.readString();
        istr.readValue(function (obj) {
          return _this9.loadBalancing = obj;
        }, IceGrid.LoadBalancingPolicy);
        this.proxyOptions = istr.readString();
        this.objects = IceGrid.ObjectDescriptorSeqHelper.read(istr);
        this.description = istr.readString();
        this.filter = istr.readString();
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 6;
      }
    }]);

    return _class20;
  }();

  Slice.defineStruct(IceGrid.ReplicaGroupDescriptor, false, true);
  Slice.defineSequence(IceGrid, "ReplicaGroupDescriptorSeqHelper", "IceGrid.ReplicaGroupDescriptor", false);
  /**
   * An application descriptor.
   *
   **/

  IceGrid.ApplicationDescriptor =
  /*#__PURE__*/
  function () {
    function _class21() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var replicaGroups = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var serverTemplates = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var serviceTemplates = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var nodes = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      var distrib = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new IceGrid.DistributionDescriptor();
      var description = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
      var propertySets = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;

      _classCallCheck(this, _class21);

      this.name = name;
      this.variables = variables;
      this.replicaGroups = replicaGroups;
      this.serverTemplates = serverTemplates;
      this.serviceTemplates = serviceTemplates;
      this.nodes = nodes;
      this.distrib = distrib;
      this.description = description;
      this.propertySets = propertySets;
    }

    _createClass(_class21, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.name);
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
        IceGrid.NodeDescriptorDictHelper.write(ostr, this.nodes);
        IceGrid.DistributionDescriptor.write(ostr, this.distrib);
        ostr.writeString(this.description);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        this.name = istr.readString();
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
        this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.nodes = IceGrid.NodeDescriptorDictHelper.read(istr);
        this.distrib = IceGrid.DistributionDescriptor.read(istr, this.distrib);
        this.description = istr.readString();
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 10;
      }
    }]);

    return _class21;
  }();

  Slice.defineStruct(IceGrid.ApplicationDescriptor, false, true);
  Slice.defineSequence(IceGrid, "ApplicationDescriptorSeqHelper", "IceGrid.ApplicationDescriptor", false);
  var iceC_IceGrid_BoxedString_ids = ["::Ice::Object", "::IceGrid::BoxedString"];
  /**
   * A "boxed" string.
   *
   **/

  IceGrid.BoxedString =
  /*#__PURE__*/
  function (_Ice$Value3) {
    _inherits(_class22, _Ice$Value3);

    function _class22() {
      var _this10;

      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

      _classCallCheck(this, _class22);

      _this10 = _possibleConstructorReturn(this, _getPrototypeOf(_class22).call(this));
      _this10.value = value;
      return _this10;
    }

    _createClass(_class22, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        ostr.writeString(this.value);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.value = istr.readString();
      }
    }]);

    return _class22;
  }(Ice.Value);

  Slice.defineValue(IceGrid.BoxedString, iceC_IceGrid_BoxedString_ids[1], false);
  /**
   * A node update descriptor to describe the updates to apply to a
   * node of a deployed application.
   *
   **/

  IceGrid.NodeUpdateDescriptor =
  /*#__PURE__*/
  function () {
    function _class23() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var variables = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var removeVariables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var propertySets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var removePropertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      var serverInstances = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
      var servers = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
      var removeServers = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
      var loadFactor = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;

      _classCallCheck(this, _class23);

      this.name = name;
      this.description = description;
      this.variables = variables;
      this.removeVariables = removeVariables;
      this.propertySets = propertySets;
      this.removePropertySets = removePropertySets;
      this.serverInstances = serverInstances;
      this.servers = servers;
      this.removeServers = removeServers;
      this.loadFactor = loadFactor;
    }

    _createClass(_class23, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.name);
        ostr.writeValue(this.description);
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        Ice.StringSeqHelper.write(ostr, this.removeVariables);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        Ice.StringSeqHelper.write(ostr, this.removePropertySets);
        IceGrid.ServerInstanceDescriptorSeqHelper.write(ostr, this.serverInstances);
        IceGrid.ServerDescriptorSeqHelper.write(ostr, this.servers);
        Ice.StringSeqHelper.write(ostr, this.removeServers);
        ostr.writeValue(this.loadFactor);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        var _this11 = this;

        this.name = istr.readString();
        istr.readValue(function (obj) {
          return _this11.description = obj;
        }, IceGrid.BoxedString);
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.removeVariables = Ice.StringSeqHelper.read(istr);
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        this.removePropertySets = Ice.StringSeqHelper.read(istr);
        this.serverInstances = IceGrid.ServerInstanceDescriptorSeqHelper.read(istr);
        this.servers = IceGrid.ServerDescriptorSeqHelper.read(istr);
        this.removeServers = Ice.StringSeqHelper.read(istr);
        istr.readValue(function (obj) {
          return _this11.loadFactor = obj;
        }, IceGrid.BoxedString);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 10;
      }
    }]);

    return _class23;
  }();

  Slice.defineStruct(IceGrid.NodeUpdateDescriptor, false, true);
  Slice.defineSequence(IceGrid, "NodeUpdateDescriptorSeqHelper", "IceGrid.NodeUpdateDescriptor", false);
  var iceC_IceGrid_BoxedDistributionDescriptor_ids = ["::Ice::Object", "::IceGrid::BoxedDistributionDescriptor"];
  /**
   * A "boxed" distribution descriptor.
   *
   **/

  IceGrid.BoxedDistributionDescriptor =
  /*#__PURE__*/
  function (_Ice$Value4) {
    _inherits(_class24, _Ice$Value4);

    function _class24() {
      var _this12;

      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new IceGrid.DistributionDescriptor();

      _classCallCheck(this, _class24);

      _this12 = _possibleConstructorReturn(this, _getPrototypeOf(_class24).call(this));
      _this12.value = value;
      return _this12;
    }

    _createClass(_class24, [{
      key: "_iceWriteMemberImpl",
      value: function _iceWriteMemberImpl(ostr) {
        IceGrid.DistributionDescriptor.write(ostr, this.value);
      }
    }, {
      key: "_iceReadMemberImpl",
      value: function _iceReadMemberImpl(istr) {
        this.value = IceGrid.DistributionDescriptor.read(istr, this.value);
      }
    }]);

    return _class24;
  }(Ice.Value);

  Slice.defineValue(IceGrid.BoxedDistributionDescriptor, iceC_IceGrid_BoxedDistributionDescriptor_ids[1], false);
  /**
   * An application update descriptor to describe the updates to apply
   * to a deployed application.
   *
   **/

  IceGrid.ApplicationUpdateDescriptor =
  /*#__PURE__*/
  function () {
    function _class25() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var distrib = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var variables = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var removeVariables = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var propertySets = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      var removePropertySets = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
      var replicaGroups = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
      var removeReplicaGroups = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;
      var serverTemplates = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : null;
      var removeServerTemplates = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : null;
      var serviceTemplates = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : null;
      var removeServiceTemplates = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : null;
      var nodes = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : null;
      var removeNodes = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : null;

      _classCallCheck(this, _class25);

      this.name = name;
      this.description = description;
      this.distrib = distrib;
      this.variables = variables;
      this.removeVariables = removeVariables;
      this.propertySets = propertySets;
      this.removePropertySets = removePropertySets;
      this.replicaGroups = replicaGroups;
      this.removeReplicaGroups = removeReplicaGroups;
      this.serverTemplates = serverTemplates;
      this.removeServerTemplates = removeServerTemplates;
      this.serviceTemplates = serviceTemplates;
      this.removeServiceTemplates = removeServiceTemplates;
      this.nodes = nodes;
      this.removeNodes = removeNodes;
    }

    _createClass(_class25, [{
      key: "_write",
      value: function _write(ostr) {
        ostr.writeString(this.name);
        ostr.writeValue(this.description);
        ostr.writeValue(this.distrib);
        IceGrid.StringStringDictHelper.write(ostr, this.variables);
        Ice.StringSeqHelper.write(ostr, this.removeVariables);
        IceGrid.PropertySetDescriptorDictHelper.write(ostr, this.propertySets);
        Ice.StringSeqHelper.write(ostr, this.removePropertySets);
        IceGrid.ReplicaGroupDescriptorSeqHelper.write(ostr, this.replicaGroups);
        Ice.StringSeqHelper.write(ostr, this.removeReplicaGroups);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serverTemplates);
        Ice.StringSeqHelper.write(ostr, this.removeServerTemplates);
        IceGrid.TemplateDescriptorDictHelper.write(ostr, this.serviceTemplates);
        Ice.StringSeqHelper.write(ostr, this.removeServiceTemplates);
        IceGrid.NodeUpdateDescriptorSeqHelper.write(ostr, this.nodes);
        Ice.StringSeqHelper.write(ostr, this.removeNodes);
      }
    }, {
      key: "_read",
      value: function _read(istr) {
        var _this13 = this;

        this.name = istr.readString();
        istr.readValue(function (obj) {
          return _this13.description = obj;
        }, IceGrid.BoxedString);
        istr.readValue(function (obj) {
          return _this13.distrib = obj;
        }, IceGrid.BoxedDistributionDescriptor);
        this.variables = IceGrid.StringStringDictHelper.read(istr);
        this.removeVariables = Ice.StringSeqHelper.read(istr);
        this.propertySets = IceGrid.PropertySetDescriptorDictHelper.read(istr);
        this.removePropertySets = Ice.StringSeqHelper.read(istr);
        this.replicaGroups = IceGrid.ReplicaGroupDescriptorSeqHelper.read(istr);
        this.removeReplicaGroups = Ice.StringSeqHelper.read(istr);
        this.serverTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.removeServerTemplates = Ice.StringSeqHelper.read(istr);
        this.serviceTemplates = IceGrid.TemplateDescriptorDictHelper.read(istr);
        this.removeServiceTemplates = Ice.StringSeqHelper.read(istr);
        this.nodes = IceGrid.NodeUpdateDescriptorSeqHelper.read(istr);
        this.removeNodes = Ice.StringSeqHelper.read(istr);
      }
    }], [{
      key: "minWireSize",
      get: function get() {
        return 15;
      }
    }]);

    return _class25;
  }();

  Slice.defineStruct(IceGrid.ApplicationUpdateDescriptor, false, true);
  /* slice2js browser-bundle-skip */

  exports.IceGrid = IceGrid;
  /* slice2js browser-bundle-skip-end */

  /* slice2js browser-bundle-skip */
})(typeof global !== "undefined" && typeof global.process !== "undefined" ? module : undefined, typeof global !== "undefined" && typeof global.process !== "undefined" ? require : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self.Ice._require : window.Ice._require, typeof global !== "undefined" && typeof global.process !== "undefined" ? exports : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : window);
/* slice2js browser-bundle-skip-end */